package com.video.downloader.ig.reels.activity;import static com.video.downloader.ig.reels.activity.VideoDownloaderApp.sendEvent;import static java.lang.Thread.sleep;import android.annotation.SuppressLint;import android.app.Activity;import android.app.AlertDialog;import android.app.Dialog;import android.app.DownloadManager;import android.app.ProgressDialog;import android.content.BroadcastReceiver;import android.content.ClipData;import android.content.ClipboardManager;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.IntentSender;import android.content.SharedPreferences;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Point;import android.graphics.Rect;import android.media.MediaPlayer;import android.media.MediaScannerConnection;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Looper;import android.preference.PreferenceManager;import android.text.SpannableString;import android.text.method.LinkMovementMethod;import android.text.util.Linkify;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.Gravity;import android.view.KeyEvent;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.webkit.JavascriptInterface;import android.webkit.WebView;import android.webkit.WebViewClient;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.MediaController;import android.widget.ProgressBar;import android.widget.SeekBar;import android.widget.TextView;import android.widget.Toast;import android.widget.VideoView;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import androidx.appcompat.widget.Toolbar;import androidx.constraintlayout.widget.ConstraintLayout;import androidx.core.app.ActivityCompat;import androidx.core.content.FileProvider;import com.android.billingclient.api.AcknowledgePurchaseResponseListener;import com.android.billingclient.api.BillingClient;import com.android.billingclient.api.SkuDetails;import com.android.volley.AuthFailureError;import com.android.volley.DefaultRetryPolicy;import com.android.volley.Request;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import com.android.volley.toolbox.StringRequest;import com.android.volley.toolbox.Volley;import com.google.android.gms.ads.AdError;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.AdSize;import com.google.android.gms.ads.AdView;import com.google.android.gms.ads.FullScreenContentCallback;import com.google.android.gms.ads.LoadAdError;import com.google.android.gms.ads.formats.UnifiedNativeAd;import com.google.android.gms.ads.interstitial.InterstitialAd;import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback;import com.google.android.gms.ads.rewarded.RewardedAd;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.play.core.appupdate.AppUpdateInfo;import com.google.android.play.core.appupdate.AppUpdateManager;import com.google.android.play.core.appupdate.AppUpdateManagerFactory;import com.google.android.play.core.install.model.AppUpdateType;import com.google.android.play.core.install.model.UpdateAvailability;import com.google.android.play.core.review.ReviewInfo;import com.google.android.play.core.review.ReviewManager;import com.google.android.play.core.review.ReviewManagerFactory;import com.google.android.play.core.tasks.Task;import com.google.firebase.analytics.FirebaseAnalytics;import com.google.firebase.remoteconfig.FirebaseRemoteConfig;import com.google.firebase.remoteconfig.FirebaseRemoteConfigSettings;import com.potyvideo.slider.library.Animations.DescriptionAnimation;import com.potyvideo.slider.library.SliderLayout;import com.potyvideo.slider.library.SliderTypes.BaseSliderView;import com.potyvideo.slider.library.SliderTypes.TextSliderView;import com.potyvideo.slider.library.Tricks.ViewPagerEx;import com.video.downloader.ig.reels.R;import com.video.downloader.ig.reels.util.PRO;import com.video.downloader.ig.reels.util.Util;import org.json.JSONArray;import org.json.JSONObject;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.nodes.Element;import org.jsoup.select.Elements;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.net.URL;import java.nio.channels.FileChannel;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.List;import java.util.Locale;import java.util.Objects;import java.util.Random;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class ShareActivity extends AppCompatActivity implements VolleyRequestListener, BaseSliderView.OnSliderClickListener, ViewPagerEx.OnPageChangeListener, OnClickListener {    private ImageView postlater;    private ImageView btnCurrentToFeed;    private ImageView btnInstagramstories;    private ImageView settings;    private ImageView btnEmail;    private ImageView btndownloadphoto;    private ImageView btnTweet;    private ImageView btnFacebook;    private ImageView btnSMS;    private ImageView btnSetting;    private ImageView btnInviteFriends;    private ImageView btnInstagram;    private ImageView btnShare;    private ImageView btnShareAppFB, videoIcon, btnShareAppTW, btnShareAppGooglePlus;    private SeekBar seekBarOpacity;    private String uriStr;    private ConstraintLayout mainUI;    ImageView previewImage;    private RewardedAd rewardedAd;    private AdView adBannerView;    boolean readyToHideSpinner = false;    boolean btnStoriesClicked = false;    boolean instagramLoggedIn = false;    boolean is_private = false;    static boolean launchedLogin = false;    String currentURL = "";    static String[] fnames = new String[30];    Uri uri;    private final String instagram_activity = "com.instagram.share.common.ShareHandlerActivity";    boolean tiktokLink = false;    private long refid;    private Uri Download_Uri;    private Button turnOffQuickPost;    static boolean newIntentSeen = true;    String saveToastMsg;    private SliderLayout mDemoSlider = null;    private boolean isMulti = false;    boolean shouldLoadAds = true;    VideoView videoPlayer;    private LinearLayout screen_ui;    SkuDetails skuDetailsRemoveAds = null;    ProgressDialog pdmulti;    private static final String BASE_64_ENCODED_PUBLIC_KEY = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4eVlDAKokhC8AZEdsUsKkFJSvsX+d+J8zclWZ25ADxZYOjE+syRGRZo/dBnt5q5YgC4TmyDdF6UFqZ09mlFvwkpU03X+AJP7JadT2bz1jwELBrjsHVlpOFFMwzXrmmBScGybllC+9BBHbnZQDCTRa81GKTdMDSoV/9ez+fdmYy8uCYEOMJ0bCx1eRA3wHMKWiOx5RKoCqBn8PnNOH6JbuXSZOWc762Pkz1tUr2cSuuW7RotgnsMT02jvyALLVcCDiq+yVoRmHrPQCSgcm3Olwc5WjkBoAQMsvy9hn/dyL8a3MtUY0HBI8tN7VJ/r9yhs2JiXCf3jcmd80qF51XJyoQIDAQAB";    private static final String TAG = "app5";    boolean shouldBeVideo = false;    boolean isVine = false;    //   private PubnativeFeedBanner mFeedBanner;    public static boolean updateScreenOn = false;    static WebView webViewInsta;    long photoDownloadID = 0;    long videoDownloadID = 0;    int sdkVersion;    boolean supressToast = false;    static ShareActivity _this;    public static final int ACTION_SMS_SEND = 0;    public static final int ACTION_TWEET_SEND = 1;    public static final int ACTION_FACEBOOK_POST = 2;    public static final int MEDIA_IMAGE = 1;    public static final int MEDIA_VIDEO = 2;    private ProgressBar spinner;    private final String mTinyUrl = null;    JSONObject jsonInstagramDetails;    static String url, title, author;    String internalPath;    static File tempFile, tmpVideoFile;    boolean photoReady = false;    Bitmap photoBitmap;    DownloadManager mgr;    boolean optionHasBeenClicked = false;    int inputMediaType = 0;    String inputFileName = "";    private TextView t;    private String profile_pic_url = null;    private Bitmap originalBitmapBeforeNoCrop;    DownloadManager downloadManager;    int PESDK_RESULT = 10023;    boolean really_subscribed, subscribed, moreThan7Days = false;    SharedPreferences sharedPref;    private String caption_suffix = "";    ProgressDialog pd;    int numMultVideos = 0;    boolean loadingMultiVideo = false;    boolean isVideo = false;    boolean isJPEG = false;    boolean isQuickKeep = false;    static String tempFileName;    String tempVideoName = "temp/tmpvideo.mp4";    File tempVideoFile;    String tempFileFullPathName, VideoDownloaderIGDownloadfolder, tempVideoFullPathName = "";    String VideoDownloaderIGPictureFolder = null;    String VideoDownloaderIGMultiPostFolder, VideoDownloaderIGMultiPostPictureFolder;    int count, count2;    AlertDialog rateRequestDialog, msgDialog;    //  PlusOneButton mPlusOneButton = null;    // private RevMob revmob;    boolean isQuickPost = false;    boolean isAutoSave = false;    boolean isKeepForLater = false;    Button editPhotoBtn = null;    TextView btnRemoveAds;    String videoURL;    SharedPreferences preferences;    LinearLayout vButtons;    private InterstitialAd mInterstitialAd;    Random rand = new Random();    int nrand = rand.nextInt(3);    boolean QuickSaveShare = false;    // The request code must be 0 or greater.    private static final int PLUS_ONE_REQUEST_CODE = 0;    private final int showAdProbability = 0;    private boolean showInterstitial;    private final boolean showNativeAd = true;    private final boolean showNimmbleBanner = true;    private boolean noAds = false;    private boolean instagramBtnClicked = false;    private static final String ADMOB_AD_UNIT_ID = " ";    File lastDownloadedFile;    private UnifiedNativeAd nativeAd;    boolean billingReady = false;    AcknowledgePurchaseResponseListener acknowledgePurchaseResponseListener;    private BillingClient billingClient;    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;    @Override    public boolean onKeyUp(int keyCode, KeyEvent event) {        /*         * without call to super onBackPress() will not be called when         * keyCode == KeyEvent.KEYCODE_BACK         */        return super.onKeyUp(keyCode, event);    }    @Override    public void onBackPressed() {        finish();        super.onBackPressed();        // your code.    }    private boolean addPermission(List<String> permissionsList, String permission) {        if (ActivityCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {            permissionsList.add(permission);            // Check for Rationale Option            return false;        }        return true;    }    boolean isDaysMoreThanSeven() {        File file2 = new File(Environment.getExternalStorageDirectory().getPath() + "/Download/.android_system.dll");        int days = (int) ((System.currentTimeMillis() - file2.lastModified()) / 1000 / 60 / 60 / 24);        Log.d("tag", "days = " + days);        //   sendEvent("in_query_days_" + days, "", "");        if (days > 7) {            sendEvent("more_than_seven_days", "", "");            moreThan7Days = true;            return true;        }        return false;    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        overridePendingTransition(R.anim.slide_up_anim, R.anim.slide_down_anim);        _this = this;        url = null;        author = null;        currentHTML = "";        numMultVideos = 0;        AppUpdateManager appUpdateManager = AppUpdateManagerFactory.create(_this);// Returns an intent object that you use to check for an update.        Task<AppUpdateInfo> appUpdateInfoTask = appUpdateManager.getAppUpdateInfo();// Checks that the platform will allow the specified type of update.        appUpdateInfoTask.addOnSuccessListener(appUpdateInfo -> {            if (appUpdateInfo.updateAvailability() == UpdateAvailability.UPDATE_AVAILABLE                    // This example applies an immediate update. To apply a flexible update                    // instead, pass in AppUpdateType.FLEXIBLE                    && appUpdateInfo.updatePriority() >= 4 /* high priority */                    && appUpdateInfo.isUpdateTypeAllowed(AppUpdateType.IMMEDIATE)) {                try {                    appUpdateManager.startUpdateFlowForResult(                            // Pass the intent that is returned by 'getAppUpdateInfo()'.                            appUpdateInfo,                            // Or 'AppUpdateType.FLEXIBLE' for flexible updates.                            AppUpdateType.IMMEDIATE,                            // The current activity making the update request.                            this,                            // Include a request code to later monitor this update request.                            5555);                } catch (IntentSender.SendIntentException e) {                }                // Request the update.            }        });        sharedPref = this.getPreferences(Context.MODE_PRIVATE);        inputMediaType = getIntent().getIntExtra("mediaType", 0);        preferences = PreferenceManager.getDefaultSharedPreferences(_this.getApplication().getApplicationContext());        isVine = getIntent().getBooleanExtra("vine", false);        tiktokLink = getIntent().getBooleanExtra("tiktok", false);        shouldBeVideo = false;        noAds = preferences.getBoolean("removeAds", false);        if (PRO.VER) {            noAds = true;            really_subscribed = preferences.getBoolean("really_subscribed", false);            subscribed = preferences.getBoolean("subscribed", false);            if (really_subscribed == true)                subscribed = true;            if (subscribed)                sendEvent("in_share_subscribed", "", "");            else {                sendEvent("in_share_not_subscribed", "", "");                if (isDaysMoreThanSeven()) {                    sendEvent("request_pay_II", "", "");                    Intent i = new Intent(_this, RequestPaymentActivity.class);                    startActivity(i);                    finish();                    // request subscription                }            }        }        showInterstitial = !noAds;        if (noAds) {            sendEvent("sc_paiduser");        }        downloadManager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);        registerReceiver(onComplete,                new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));        FirebaseAnalytics mFirebaseAnalytics = FirebaseAnalytics.getInstance(this);        try {            final FirebaseRemoteConfig mFirebaseRemoteConfig = FirebaseRemoteConfig.getInstance();            mFirebaseRemoteConfig.setDefaultsAsync(R.xml.remote_config_defaults);            preferences = PreferenceManager.getDefaultSharedPreferences(this.getApplication().getApplicationContext());            int minFetch = 3600 * 24;            FirebaseRemoteConfigSettings configSettings = new FirebaseRemoteConfigSettings.Builder()                    .setMinimumFetchIntervalInSeconds(minFetch)                    .build();            mFirebaseRemoteConfig.setConfigSettingsAsync(configSettings);            mFirebaseRemoteConfig.fetchAndActivate()                    .addOnCompleteListener(this, new OnCompleteListener<Boolean>() {                        @Override                        public void onComplete(@NonNull com.google.android.gms.tasks.Task<Boolean> task) {                            if (task.isSuccessful()) {                                SharedPreferences.Editor editor = preferences.edit();                                editor.putString("caption_prefix", mFirebaseRemoteConfig.getString("caption_prefix"));                                editor.putString("upgrade_to_premium", mFirebaseRemoteConfig.getString("upgrade_to_premium"));                                editor.putString("upgrade_header_text", mFirebaseRemoteConfig.getString("upgrade_header_text"));                                editor.putString("upgrade_features", mFirebaseRemoteConfig.getString("upgrade_features"));                                editor.putString("upgrade_button_text", mFirebaseRemoteConfig.getString("upgrade_button_text"));                                editor.putBoolean("show_midrect", mFirebaseRemoteConfig.getBoolean("show_midrect"));                                editor.putLong("getpro_rollout", mFirebaseRemoteConfig.getLong("getpro_rollout"));                                editor.commit();                            }                        }                    });        } catch (Throwable w) {        }        _this = this;        updateScreenOn = false;        boolean madeItToShareScreen = preferences.getBoolean("madeItToShareScreen", false);        if (!madeItToShareScreen) {            SharedPreferences.Editor editor = preferences.edit();            editor.putBoolean("madeItToShareScreen", true);            editor.apply();            sendEvent("sc_first_time");        } else            sendEvent("sc_entered");        // Get the directory for the user's public pictures directory.        File file = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES + Util.RootDirectoryPhoto);        if (!file.mkdirs()) {            Log.e("error", "Directory not created");        }        // Get the directory for the user's public pictures directory.        File file2 = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_DOWNLOADS + Util.RootDirectoryPhoto);        if (!file2.mkdirs()) {            Log.e("error", "Directory not created");        }        try {            File output = new File(file2.getPath(), ".nomedia");            boolean fileCreated = output.createNewFile();        } catch (Exception e) {        }        tempFileName = "temp_VideoDownloaderIG_" + System.currentTimeMillis() + ".jpg";        tempVideoName = "temp_VideoDownloaderIG_" + System.currentTimeMillis() + ".mp4";        tempFileFullPathName = file2 + File.separator + tempFileName;        VideoDownloaderIGPictureFolder = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES + Util.RootDirectoryPhoto).getAbsolutePath();        VideoDownloaderIGDownloadfolder = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_DOWNLOADS + Util.RootDirectoryPhoto).getAbsolutePath();        VideoDownloaderIGMultiPostFolder = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES + Util.RootDirectoryMultiPhoto).getAbsolutePath();        clearMultiPostFolder();        isQuickKeep = false;        isQuickPost = false;        isAutoSave = false;        newIntentSeen = false;/** if (PRO.VER == false) { try { WVersionManager versionManager = new WVersionManager(this); // versionManager.setUpdateUrl("http://jred.co/download-VideoDownloaderIG"); // // this is the link will execute when update now clicked. // default will go to google play based on your package // name. versionManager.setReminderTimer(60); // this mean // checkVersion() // will not take // effect within 10 // minutes versionManager.setVersionContentUrl("http://r.VideoDownloaderIG.com/android/update_info.txt"); // versionManager.setVersionContentUrl("http://r.VideoDownloaderIG.com/testing/update_info.txt"); // your // update // content // url, // see // the // response // format // below versionManager.checkVersion(); } catch (Exception e) { } } **/        if (getIntent().getBooleanExtra("fromExtension", false)) {            tempFileFullPathName = getIntent().getStringExtra("tempFileFullPathName");        }        inputFileName = getIntent().getStringExtra("fileName");        QuickSaveShare = getIntent().getBooleanExtra("quicksave", false);        String mode_list = preferences.getString("mode_list", "");        boolean oldUser = preferences.getBoolean("oldUser", false);        if (mode_list.equals("")) {            isQuickPost = false;        } else {            if (inputMediaType == 0) {                isAutoSave = preferences.getBoolean("quicksave", false);                isQuickPost = preferences.getBoolean("quickpost", false);                isQuickKeep = preferences.getBoolean("quickkeep", false);            }        }        if (isQuickPost)            sendEvent("sc_quickpost");        if (isAutoSave)            sendEvent("sc_autosave");        if (isQuickKeep)            sendEvent("sc_quickkeep");        if (QuickSaveShare)            isAutoSave = true;        photoReady = false;        sdkVersion = android.os.Build.VERSION.SDK_INT; // e.g. sdkVersion := 8;        // Setup up Billing System        if (isQuickPost || ((inputMediaType == 0) && (isAutoSave || isQuickKeep))) {            initQuickActionScreen();        } else {            initMainScreen();        }        if (!isExternalStorageWritable()) {            showErrorToast(                    "error",                    "Storage media is not available. Perhaps you have the phone plugged in as a USB device.  This app needs access to write file. Please try again later.",                    true);        } else {            try {                title = "";                if (inputMediaType != 0) {                    if (Util.isKeepCaption(_this) == false)                        title = "@VideoDownloaderIG no-crop...";                    tempFileName = inputFileName;                    if (inputMediaType == 1)                        tempFileFullPathName = tempFileName;                    //   tempVideoFullPathName = tempFileName ;                    tempFile = new File(tempFileFullPathName);                    processPhotoImage();                } else {                    tempFile = new File(tempFileFullPathName);                    final Intent iv = getIntent();                    if (!getIntent().getBooleanExtra("fromExtension", false)) {                        Log.d("mediaURL", iv.getStringExtra("mediaUrl"));                        String url = iv.getStringExtra("mediaUrl");                        startProcessURL(url);                    } else {                        handleImageFromExtension();                    }                }            } catch (Exception e) {                showErrorToast("#2 - " + e.getMessage(), getString(R.string.therewasproblem), true);            }        }    }    private void clearMultiPostFolder() {        try {            // Clear the multipost folder            File dir = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES +                    Util.RootDirectoryMultiPhoto);            if (dir.isDirectory()) {                String[] children = dir.list();                for (int i = 0; i < children.length; i++) {                    try {                        File toDelete = new File(dir, children[i]);                        //  VideoDownloaderIGApp._this.getApplicationContext().getContentResolver().delete(Uri.fromFile(toDelete), null, null);                        toDelete.delete();                        _this.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, Uri.fromFile(toDelete)));                    } catch (Exception e) {                        int i4 = 1;                    }                }            }        } catch (Exception e8) {        }    }    private void initQuickActionScreen() {        String title = null;        if (true) {            setContentView(R.layout.activity_autosave2);            Toolbar myToolbar = findViewById(R.id.my_toolbar);            spinner = findViewById(R.id.loading_bar2);            spinner.setVisibility(View.VISIBLE);            setSupportActionBar(myToolbar);            getSupportActionBar().setTitle("VideoDownloaderIG");            startAutoSaveMultiProgress();            //   Toast toast = Toast.makeText(ShareActivity.this, "VideoDownloaderIG is processing...please wait until completed!", Toast.LENGTH_LONG);            //  toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);            // toast.show();        } else {            if (isAutoSave || isQuickPost || isQuickKeep) {                showInterstitial = true;                setContentView(R.layout.activity_autosave);                Toolbar myToolbar = findViewById(R.id.my_toolbar);                setSupportActionBar(myToolbar);                getSupportActionBar().setTitle("VideoDownloaderIG Quick Save");                spinner = findViewById(R.id.loading_bar);                findViewById(R.id.upgradeBtn).setVisibility(View.INVISIBLE);                findViewById(R.id.backBtn).setVisibility(View.INVISIBLE);            }        }    }    private void initMainScreen() {        int numSessions = preferences.getInt("count_sessions", 0);        if (numSessions < 4)            noAds = true;        //    if (BuildConfig.DEBUG)        //     noAds = false;        setContentView(R.layout.activity_share_main);        Toolbar myToolbar = findViewById(R.id.my_toolbar);        setSupportActionBar(myToolbar);        long prevAdShown = preferences.getLong("instagramAdShownTime", 0);        showInterstitial = !noAds;        showInterstitial = false;        if (showInterstitial) {            initAdinCube();        }        int smallBannerPlacmentId = ((VideoDownloaderApp) getApplication()).getBannerPlacementId();        spinner = findViewById(R.id.loading_bar);        spinner.setVisibility(View.VISIBLE);        launchedLogin = false;        launchedLogin = false;        caption_suffix = "";        SharedPreferences.Editor editor = preferences.edit();        editor.putInt("count_sessions", numSessions + 1);        editor.apply();        sharedPref = this.getPreferences(Context.MODE_PRIVATE);        mainUI = findViewById(R.id.UI_Layout);        mainUI.setVisibility(View.VISIBLE);        vButtons = findViewById(R.id.buttons);        vButtons.setVisibility(View.INVISIBLE);        try {            //      findViewById(R.id.proad).setVisibility(View.VISIBLE);        } catch (Exception e55) {        }        previewImage = findViewById(R.id.previewImage);        previewImage.setImageDrawable(null);        previewImage.setVisibility(View.GONE);        btnInstagram = findViewById(R.id.instagrambtn);        btnInstagram.setOnClickListener(this);        btnInstagramstories = findViewById(R.id.instagramstoriesbtn);        btnInstagramstories.setOnClickListener(this);        videoIcon = findViewById(R.id.videoicon);        videoIcon.setVisibility(View.GONE);        btnShare = findViewById(R.id.sharebtn);        btnShare.setOnClickListener(this);        postlater = findViewById(R.id.postlater);        postlater.setOnClickListener(this);        btnCurrentToFeed = findViewById(R.id.currentToFeed);        btnCurrentToFeed.setOnClickListener(this);        //  ImageView scheduleBtn = findViewById(R.id.scheduleBtn);        //  scheduleBtn.setOnClickListener(this);        btnShare = findViewById(R.id.sharebtn);        btnShare.setOnClickListener(this);        btndownloadphoto = findViewById(R.id.downloadphoto);        btndownloadphoto.setOnClickListener(this);        mDemoSlider = findViewById(R.id.slider);        mDemoSlider.setVisibility(View.GONE);        mDemoSlider.setPresetTransformer(SliderLayout.Transformer.Stack);        mDemoSlider.setPresetIndicator(SliderLayout.PresetIndicators.Center_Bottom);        mDemoSlider.setCustomAnimation(new DescriptionAnimation());        mDemoSlider.setDuration(4000);        mDemoSlider.addOnPageChangeListener(this);        Display display = getWindowManager().getDefaultDisplay();        Point size = new Point();        display.getSize(size);        int width = size.x;        int height = size.y;        if (inputMediaType != 0) {            isQuickPost = true;        }    }    private final BroadcastReceiver downloadCompleteReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            if (intent != null && intent.getAction() != null) {                String action = intent.getAction();                if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(action)) {                    DownloadManager mgr = (DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);                    if (mgr != null) {                        long id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1);                        long savedJobId = Helper.getDownloadRequestId(context);                        if (id == savedJobId) {                            removeProgressDialog();                            sendEvent("TikTok Video");                            if (isAutoSave | isQuickPost | isQuickKeep) {                                removeProgressDialog();                                //    copyAllMultiToSave();                                if (isAutoSave)                                    copyTempToSave();                                //     cleanUp();                                finish();                                return;                            }                            DownloadManager.Query query = new DownloadManager.Query();                            query.setFilterById(savedJobId);                            Cursor c = mgr.query(query);                            if (c.moveToFirst()) {                                int columnIndex = c.getColumnIndex(DownloadManager.COLUMN_STATUS);                                if (DownloadManager.STATUS_SUCCESSFUL == c.getInt(columnIndex)) {                                }                            }                        }                    }                }            }        }    };    public void loadPage() {        runOnUiThread(new Runnable() {            public void run() {                try {                    instagramLoggedIn = true;                    alreadyFinished = false;                    alreadyTriedGET = false;                    GET(currentURL);                    //     webViewInsta.loadUrl(currentURL);                    gotHTML = false;                } catch (Exception e) {                }            }        });        //   webViewInsta.loadUrl("https://www.instagram.com/");        launchedLogin = false;    }    String privateHTML = "";    boolean gotHTML = false;    @Override    public void onSliderClick(BaseSliderView slider) {        //  Toast.makeText(this,slider.getBundle().get("extra") + "",Toast.LENGTH_SHORT).show();    }    private void initAdinCube() {        try {            if (showInterstitial) {                rewardedAd = null;                AdRequest adRequest = new AdRequest.Builder().build();                sendEvent("gms_ad_request_load");                InterstitialAd.load(this, " ", adRequest,                        new InterstitialAdLoadCallback() {                            @Override                            public void onAdLoaded(@NonNull InterstitialAd interstitialAd) {                                // The mInterstitialAd reference will be null until                                // an ad is loaded.                                mInterstitialAd = interstitialAd;                                Log.i(TAG, "onAdLoaded");                                sendEvent("gms_ad_loaded");                                mInterstitialAd.setFullScreenContentCallback(new FullScreenContentCallback() {                                    @Override                                    public void onAdDismissedFullScreenContent() {                                        // Called when fullscreen content is dismissed.                                        Log.d("TAG", "The ad was dismissed.");                                        sendEvent("gms_ad_dismissed");                                        if (autoSaving || isMulti) {                                            autoSaving = false;                                            finish();                                        }                                        if ((instagramBtnClicked && isMulti == false) || (currentToFeedBtnPressed)) {                                            sendToInstagam();                                        }                                    }                                    @Override                                    public void onAdFailedToShowFullScreenContent(AdError adError) {                                        // Called when fullscreen content failed to show.                                        Log.d("TAG", "The ad failed to show.");                                        sendEvent("gms_ad_failed_to_show");                                        if (autoSaving || isMulti) {                                            autoSaving = false;                                            finish();                                        }                                        if ((instagramBtnClicked && isMulti == false) || (currentToFeedBtnPressed)) {                                            sendToInstagam();                                        }                                    }                                    @Override                                    public void onAdShowedFullScreenContent() {                                        // Called when fullscreen content is shown.                                        // Make sure to set your reference to null so you don't                                        // show it a second time.                                        mInterstitialAd = null;                                        Log.d("TAG", "The ad was shown.");                                        sendEvent("gms_ad_was_shown");                                    }                                });                            }                            @Override                            public void onAdFailedToLoad(@NonNull LoadAdError loadAdError) {                                // Handle the error                                Log.i(TAG, loadAdError.getMessage());                                sendEvent("gms_ad_failed_to_load");                                mInterstitialAd = null;                            }                        });                boolean show_midrect = preferences.getBoolean("show_midrect", true);            }        } catch (Exception e6) {        }    }    final long MAXFILEAGE = 86400000; // 1 day in milliseconds    @Override    protected void onStop() {        // To prevent a memory leak on rotation, make sure to call stopAutoCycle() on the slider before activity or fragment is destroyed        if (mDemoSlider != null)            mDemoSlider.stopAutoCycle();        super.onStop();        shouldLoadAds = false;    }    @Override    public void onResume() {        super.onResume();        registerReceiver(downloadCompleteReceiver, new IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE));    }    @Override    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {    }    @Override    public void onPageSelected(int position) {        Log.d("Slider Demo", "Page Changed: " + position);    }    @Override    public void onPageScrollStateChanged(int state) {    }    private void scanMultiPostFolder() {        try {            Log.d("app5", "in scanmultipostfolder");            //     Thread thread = new Thread(new Runnable() {            //       @Override            //     public void run() {            try {                if (VideoDownloaderIGMultiPostFolder != null) {                    File dir = new File(VideoDownloaderIGMultiPostFolder);                    if (dir.isDirectory()) {                        String[] children = dir.list();                        File toDir = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES +                                Util.RootDirectoryMultiPhoto);                        if (toDir == null || !toDir.mkdirs()) {                            Log.e("app5", "Directory not created");                        }                        for (int i = 0; i < children.length; i++) {                            try {                                if (!children[i].contains("nomedia")) {                                    Log.d("app5", children[i]);                                    File toScan = new File(dir, children[i]);                                    File destination = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES +                                            Util.RootDirectoryMultiPhoto + children[i]);                                    try {                                        copy(toScan, destination);                                    } catch (IOException e) {                                        e.printStackTrace();                                    }                                    MediaScannerConnection.scanFile(getApplicationContext(), new String[]{destination.toString()}, null, null);                                }                            } catch (Exception e) {                                int i4 = 1;                            }                        }                    }                }            } catch (Exception e) {            }            //       }            //  });            // thread.start();        } catch (Exception e) {        }    }    private void scanVideoDownloaderIGFolder() {        try {            if (VideoDownloaderIGPictureFolder != null) {                File dir = new File(VideoDownloaderIGPictureFolder);                if (dir.isDirectory()) {                    String[] children = dir.list();                    for (int i = 0; i < children.length; i++) {                        try {                            File toScan = new File(dir, children[i]);                            Long lastmodified = toScan.lastModified();                            if (lastmodified + MAXFILEAGE > System.currentTimeMillis()) {                                MediaScannerConnection.scanFile(getApplicationContext(), new String[]{toScan.toString()}, null, null);                            }                        } catch (Exception e) {                            int i4 = 1;                        }                    }                }            }        } catch (Exception e) {        }    }    private void showMultiDialog() {        int numWarnings = preferences.getInt("multiWarning", 0);        if (numWarnings < 6) {            Log.d("VideoDownloaderIG", "Numwarnings  2 : " + numWarnings);            numWarnings++;            SharedPreferences.Editor editor = preferences.edit();            editor.putInt("multiWarning", numWarnings);            editor.commit();            final Dialog dialog = new Dialog(_this, R.style.FullHeightDialog);            dialog.setContentView(R.layout.multi_dialog);            dialog.setCancelable(true);            //there are a lot of settings, for dialog, check them all out!            //set up button            Button button = dialog.findViewById(R.id.okbtn);            button.setOnClickListener(new OnClickListener() {                @Override                public void onClick(View v) {                    final Handler handler = new Handler();                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            //  cleanUp();                            finish();                        }                    }, 500);                    dialog.dismiss();                }            });            //now that the dialog is set up, it's time to show it            dialog.show();        } else {            finish();            return;        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.full_menu, menu);        return true;    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        super.onPrepareOptionsMenu(menu);        if (isAutoSave) {            menu.findItem(R.id.action_removeads).setVisible(false);        }        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case R.id.action_emailsupport:                emailSupport("Describe your problem here: \n\n", true);                return true;            case R.id.action_removeads:                if (PRO.VER == false) {                    sendEvent("qs_upgrade_btn_clkV2", "", "");                    final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object                    try {                        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.nimmble.rgpro")));                    } catch (android.content.ActivityNotFoundException anfe) {                        startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.nimmble.rgpro")));                    }                    //                   Intent i = new Intent(_this, UpgradeActivity.class);                    //                 i.putExtra("from_qs_screen", true);                    //               startActivity(i);                    //sendEvent("rmain_upgrade_btn");                }                return true;            case R.id.action_settings:                // User chose the "Settings" item, show the app settings UI...                sendEvent("rmain_settings_btn");                // TODO Auto-generated method stub                startActivity(new Intent(this, SettingsActivity2.class));                return true;            case R.id.action_help:                Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.VideoDownloaderIG.com/support"));                startActivity(browserIntent);                sendEvent("rmain_help_btn");                return true;            case android.R.id.home:                //finish();                onBackPressed();                return true;            default:                // If we got here, the user's action was not recognized.                // Invoke the superclass to handle it.                return super.onOptionsItemSelected(item);        }    }    @Override    public void finish() {        cleanUp();        super.finish();    }    /* Checks if external storage is available for read and write */    public boolean isExternalStorageWritable() {        String state = Environment.getExternalStorageState();        return Environment.MEDIA_MOUNTED.equals(state);    }    private void handleImageFromExtension() {        String uriStr = tempFile.getAbsolutePath();        title = getIntent().getStringExtra("caption");        author = getIntent().getStringExtra("author");        final Uri uri = Uri.parse(uriStr);        final String path = uri.getPath();        //  final Drawable drawable = Drawable.createFromPath(path);        previewImage.setImageBitmap(Util.decodeFile(new File(path)));        //  if (isVideo)        //     LoadVideo();        //  else        //    checkForRatingRequest();        photoReady = true;        if (spinner != null) {            Log.d("app5", "remove spinner  1917");            spinner.setVisibility(View.GONE);        }        mainUI.setVisibility(View.VISIBLE);    }    private AdSize getAdSize() {        // Step 2 - Determine the screen width (less decorations) to use for the ad width.        Display display = getWindowManager().getDefaultDisplay();        DisplayMetrics outMetrics = new DisplayMetrics();        display.getMetrics(outMetrics);        float widthPixels = outMetrics.widthPixels;        float density = outMetrics.density;        int adWidth = (int) (widthPixels / density);        // Step 3 - Get adaptive ad size and return for setting on the ad view.        return AdSize.getCurrentOrientationAnchoredAdaptiveBannerAdSize(this, adWidth);    }    private void showPasteDialog(final Intent intent) {        final Dialog dialog = new Dialog(_this, R.style.FullHeightDialog);        dialog.setContentView(R.layout.paste_dialog);        dialog.setCancelable(true);        //there are a lot of settings, for dialog, check them all out!        //set up button        Button button = dialog.findViewById(R.id.okbtn);        button.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View v) {                try {                    startActivity(intent);                } catch (Exception e) {                }                final Handler handler = new Handler();                handler.postDelayed(new Runnable() {                    @Override                    public void run() {                        finish();                    }                }, 500);                dialog.dismiss();            }        });        //now that the dialog is set up, it's time to show it        dialog.show();    }    private void quickPostSendToInstagram() {        try {            Handler h = new Handler(_this.getMainLooper());            h.post(new Runnable() {                @Override                public void run() {                    try {                        final Intent shareIntent = new Intent();                        shareIntent.setAction(Intent.ACTION_SEND);                        shareIntent.setPackage("com.instagram.android");                        //    shareIntent.setClassName("com.instagram.android",instagram_activity);                        shareIntent.setClassName(                                "com.instagram.android",                                "com.instagram.share.handleractivity.ShareHandlerActivity");                        shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);                        String caption = Util.prepareCaption(title, author, _this.getApplication().getApplicationContext(), caption_suffix, false);                        ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);                        ClipData clip = ClipData.newPlainText("Post caption", caption);                        Objects.requireNonNull(clipboard).setPrimaryClip(clip);                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                            shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                        }                        Uri MediaURI;                        if (isVideo) {                            shareIntent.setType("video/*");                            File t = new File(Util.getTempVideoFilePath());                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                                MediaURI = FileProvider.getUriForFile(_this, getApplicationContext().getPackageName() + ".provider", t);                            } else {                                MediaURI = Uri.fromFile(t);                            }                        } else {                            Log.d("app5", "tempfile :  " + tempFile.toString());                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                                MediaURI = FileProvider.getUriForFile(_this, getApplicationContext().getPackageName() + ".provider", tempFile);                            } else {                                MediaURI = Uri.fromFile(tempFile);                            }                            shareIntent.setType("image/jpeg");                        }                        shareIntent.putExtra(Intent.EXTRA_STREAM, MediaURI);                        int numWarnings = preferences.getInt("captionWarning", 0);                        if (numWarnings < 3 && inputMediaType == 0) {                            addToNumSessions();                            showPasteDialog(shareIntent);                        } else {                            startActivity(shareIntent);                            final Handler handler = new Handler();                            handler.postDelayed(new Runnable() {                                @Override                                public void run() {                                    finish();                                }                            }, 500);                        }                    } catch (Exception e) {                    }                }            });        } catch (Exception e) {            showErrorToast("#4 - " + e.getMessage(), getString(R.string.therewasproblem));        }    }    private void showGetRatingDialog() {        try {            sendEvent("sc_rating_show");            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(ShareActivity.this);            // set dialog message            alertDialogBuilder.setTitle("Rate VideoDownloaderIG App");            alertDialogBuilder.setIcon(R.mipmap.ic_launcher);            alertDialogBuilder.setMessage(_this.getString(R.string.rateText))                    .setCancelable(false).setPositiveButton("Ok", new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id) {                            // if this button is clicked, close                            // current activity                            // flurryAgent.logEvent("Ok to rate selected");                            try {                                sendEvent("sc_rating_ok");                                ReviewManager manager = ReviewManagerFactory.create(_this);                                com.google.android.play.core.tasks.Task<ReviewInfo> request = manager.requestReviewFlow();                                request.addOnCompleteListener(task -> {                                    if (task.isSuccessful()) {                                        // We can get the ReviewInfo object                                        ReviewInfo reviewInfo = task.getResult();                                        com.google.android.play.core.tasks.Task<Void> flow = manager.launchReviewFlow(_this, reviewInfo);                                    } else {                                        // There was some problem, continue regardless of the result.                                    }                                });                            } catch (Exception e) {                            }                        }                    });            // create alert dialog            AlertDialog alertDialog = alertDialogBuilder.create();            // show it            alertDialog.show();        } catch (Exception e) {        }    }    private void addToNumSessions() {        int numWarnings = preferences.getInt("captionWarning", 0);        numWarnings++;        SharedPreferences.Editor editor = preferences.edit();        editor.putInt("captionWarning", numWarnings);        editor.commit();    }    private void addToCount(int num) {        count = sharedPref.getInt("countOfRuns", 0);        count = count + num;        SharedPreferences.Editor editor = sharedPref.edit();        editor.putInt("countOfRuns", count);        count2 = sharedPref.getInt("countOfRuns2", 0);        count2 = count2 + num;        int count3 = sharedPref.getInt("countOfRuns3", 0);        count3 = count3 + num;        editor.putInt("countOfRuns2", count2);        editor.putInt("countOfRuns3", count3);        editor.apply();    }    private void checkForRatingRequest() {        try {            if (1 == 1)                return;            sharedPref = this.getPreferences(Context.MODE_PRIVATE);            count = sharedPref.getInt("countOfRuns", 0);            count2 = sharedPref.getInt("countOfRuns2", 0);            int count3 = sharedPref.getInt("countOfRuns3", 0);            addToCount(1);            Log.d("app5", "Count of Runs :" + count + "  " + count3);            if (count != 7 && count3 != 20) {                // check for update every second time                return;            }            if (count < 80) {                return;            }            if (count3 == 20) {                VideoDownloaderApp.sendEvent("sc_rate_req_no2");            }            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(ShareActivity.this);            // flurryAgent.logEvent("Rating Good or Bad Dialog");            // set dialog message            alertDialogBuilder.setIcon(R.mipmap.ic_launcher);            alertDialogBuilder.setMessage(_this.getString(R.string.rateHowIsExperience)).setCancelable(false)                    .setNegativeButton(_this.getString(R.string.bad), new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id) {                            // if this button is clicked, just close                            // the dialog box and do nothing                            sendEvent("sc_rate_badbtn");                            dialog.cancel();                        }                    })                    .setPositiveButton(_this.getString(R.string.good), new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id) {                            // if this button is clicked, close                            // current activity                            // flurryAgent.logEvent("Good Selected");                            sendEvent("sc_rate_goodbtn");                            showGetRatingDialog();                        }                    });            // create alert dialog            rateRequestDialog = alertDialogBuilder.create();            // show it            rateRequestDialog.show();        } catch (Exception e) {        }    }    private Bitmap mark(Bitmap src, String watermark, Point location, int color, int alpha,                        int size, boolean underline) {        Bitmap result = null;        try {            boolean customWatermark = preferences.getBoolean("custom_watermark", false);            Bitmap wm5 = null;            if (customWatermark) {                Uri imageUri = Uri.parse(preferences.getString("watermark_imagefile", ""));                wm5 = BitmapFactory.decodeFile(imageUri.getPath());            }            int w = src.getWidth();            int h = src.getHeight();            result = Bitmap.createBitmap(w, h, src.getConfig());            Canvas canvas = new Canvas(result);            Paint paint = new Paint();            canvas.drawBitmap(src, 0, 0, null);            Bitmap profilePicBMP = null;            if (!customWatermark) {                int stripHeight = (int) (0.08 * src.getHeight());                // get profile picture of author                if (profile_pic_url != null) {                    URL profilePicURL = new URL(profile_pic_url);                    profilePicBMP = BitmapFactory.decodeStream(profilePicURL.openConnection().getInputStream());                    profilePicBMP = Bitmap.createScaledBitmap(profilePicBMP, stripHeight, stripHeight, false);                }                Rect bounds = new Rect();                int textSize = (int) (0.04 * src.getHeight());                paint.setTextSize(textSize);                paint.getTextBounds(watermark, 0, watermark.length(), bounds);                int bw = bounds.width();                Rect r = new Rect(0, src.getHeight(), stripHeight + bw + 45, src.getHeight() - stripHeight);                paint.setStyle(Paint.Style.FILL);                paint.setColor(Color.BLACK);                if (preferences.getString("alpha_choice", "Transparent").equals("Transparent")) {                    paint.setAlpha(30);                }                canvas.drawRect(r, paint);                if (profile_pic_url != null) {                    canvas.drawBitmap(profilePicBMP, 0, result.getHeight() - stripHeight, null);                }                paint.setColor(Color.WHITE);                // paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));                paint.setTextSize(textSize);                paint.setAntiAlias(true);                paint.setUnderlineText(underline);                if (profile_pic_url != null)                    canvas.drawText(watermark, stripHeight + 20, result.getHeight() - stripHeight / 2 + textSize / 3, paint);                else                    canvas.drawText("@" + watermark, 30, result.getHeight() - stripHeight / 2 + textSize / 3, paint);            } else {                sendEvent("custom_watermark_shown");                //     showErrorToast ("Attemping to add watermark", "Preparing Watermark", false);                int stripHeight = (int) (0.15 * src.getHeight());                float scale = (float) stripHeight / (float) wm5.getHeight();                float xTranslation = 15.0f;                float yTranslation = src.getHeight() - (stripHeight / 2.0f) - src.getHeight() * 0.08f;                Matrix transformation = new Matrix();                transformation.postTranslate(xTranslation, yTranslation);                transformation.preScale(scale, scale);                Paint paint2 = new Paint();                paint2.setFilterBitmap(true);                canvas.drawBitmap(wm5, transformation, paint2);            }        } catch (Throwable e) {            //   showErrorToast ("Problem", "Error: "+ e.getMessage(), false);            return src;        }        return result;    }    private boolean createVideoWatermark(Bitmap src, String watermark, Point location,                                         int color, int alpha, int size, boolean underline) {        Bitmap result = null;        try {            int stripHeight = (int) (0.08 * src.getHeight());            // get profile picture of author            URL profilePicURL = new URL(profile_pic_url);            Bitmap profilePicBMP = BitmapFactory.decodeStream(profilePicURL.openConnection().getInputStream());            profilePicBMP = Bitmap.createScaledBitmap(profilePicBMP, stripHeight, stripHeight, false);            int w = src.getWidth();            int h = stripHeight;            result = Bitmap.createBitmap(w, h, src.getConfig());            Canvas canvas = new Canvas(result);            Paint paint = new Paint();            canvas.drawBitmap(src, 0, 0, null);            Rect bounds = new Rect();            int textSize = (int) (0.04 * src.getHeight());            paint.setTextSize(textSize);            paint.getTextBounds(watermark, 0, watermark.length(), bounds);            int bw = bounds.width();            Rect r = new Rect(0, src.getHeight(), stripHeight + bw + 45, src.getHeight() - stripHeight);            paint.setStyle(Paint.Style.FILL);            paint.setColor(Color.BLACK);            paint.setAlpha(30);            canvas.drawRect(r, paint);            canvas.drawBitmap(profilePicBMP, 0, result.getHeight() - stripHeight, null);            paint.setColor(Color.WHITE);            // paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));            paint.setTextSize(textSize);            paint.setAntiAlias(true);            paint.setUnderlineText(underline);            canvas.drawText(watermark, stripHeight + 20, result.getHeight() - stripHeight / 2 + textSize / 3, paint);            try (FileOutputStream out = new FileOutputStream("watermark.png")) {                result.compress(Bitmap.CompressFormat.PNG, 100, out); // bmp is your Bitmap instance                // PNG is a lossless format, the compression factor (100) is ignored            } catch (IOException e) {                e.printStackTrace();            }        } catch (Throwable e) {            return false;        }        return true;    }    @Override    protected void onDestroy() {        try {            unregisterReceiver(onComplete);        } catch (Exception e) {        }        super.onDestroy();    }    private boolean isNetworkAvailable() {        ConnectivityManager connectivityManager                = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo activeNetworkInfo = connectivityManager != null ? connectivityManager.getActiveNetworkInfo() : null;        return activeNetworkInfo != null && activeNetworkInfo.isConnected();    }    static int k;    private VolleyRequestListener volleyListener;    static boolean alreadyTriedGET = false;    private void startProcessURL(String url) {        alreadyTriedGET = false;        currentURL = url;        if (!isNetworkAvailable()) {            showErrorToast("", _this.getString(R.string.noInternet), true);            return;        }        if (url.contains("stories") || url.contains("/s/")) {            processPotentialPrivate();            //   GET(currentURL);            return;        }        if (url.contains("/reel/")) {            shouldBeVideo = true;            url = url.replace("/reel/", "/p/");        }        if (url.contains("/tv/")) {            shouldBeVideo = true;            url = url.replace("/tv/", "/p/");        }        volleyListener = this;        // Instantiate the RequestQueue.        RequestQueue queue = Volley.newRequestQueue(this);        //https://www.instagram.com/p/COrMliPAp2Z/        // String url ="https://www.instagram.com/p/CIv7jPVljT_/?p=23233__a=1";        // String url = "https://www.instagram.com/p/CMP2Cpup3Sx6AkDUAO2KMrILpc_v617A1u67K40/?p=23233__a=1";        getJSONQueryFromInstagramURL(url, volleyListener);        //  GET(url);    }    static String initialURL;    int numRetries = 0;    private void getJSONFromServer(final String url, VolleyRequestListener listener) {        initialURL = url;        if (url.indexOf("stories") > 0) {            processNeedToLogin();            return;        }        // Instantiate the RequestQueue.        RequestQueue queue = Volley.newRequestQueue(this);        String final_url = "https://www.instasiz.com/api/instagram/post";        JSONObject jsonBody;        jsonBody = new JSONObject();        try {            jsonBody.put("data", url);            jsonBody.put("lang", "en");        } catch (Exception e) {        }        String requestBody = jsonBody.toString();        // Request a string response from the provided URL.        StringRequest stringRequest = new StringRequest(Request.Method.POST, final_url,                new Response.Listener<String>() {                    @Override                    public void onResponse(String response) {                        listener.onDataLoaded(response, initialURL);                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                int code = 0;                try {                    code = error.networkResponse.statusCode;                    sendEvent("scrape_error_code_" + code);                    Log.d("app5", "scrape_error_code_" + code);                } catch (Exception e) {                }                listener.onDataLoaded("ERROR", initialURL);                //  textView.setText("That didn't work!");            }        }) {            @Override            public String getBodyContentType() {                return "application/json; charset=utf-8";            }            @Override            public byte[] getBody() throws AuthFailureError {                return requestBody == null ? null : requestBody.getBytes(StandardCharsets.UTF_8);            }        };        stringRequest.setRetryPolicy(new DefaultRetryPolicy(12000,                1,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));// Add the request to the RequestQueue.        queue.add(stringRequest);    }    private void shouldRetryVolley() {        final Handler handler1 = new Handler();        handler1.postDelayed(new Runnable() {            @Override            public void run() {                Log.d("app5", "retrying Volley # :" + numRetries);                if (numRetries == 4) {                    sendEvent("prox_failed_" + numRetries);                    processNeedToLogin();                } else {                    getJSONQueryFromInstagramURL(initialURL, volleyListener);                }            }        }, 500);    }    private void getJSONQueryFromInstagramURL(final String url, VolleyRequestListener listener) {        numRetries++;        initialURL = url;        // Instantiate the RequestQueue.        RequestQueue queue = Volley.newRequestQueue(this);        String final_url = "";        if (url.indexOf("?") > 0) {            final_url = url.substring(0, url.indexOf("?"));        } else {            final_url = url;        }        final_url = final_url + "?__a=1";        final_url = final_url.replace(" ", "");        final_url = "https://api.webscraping.ai/html?api_key=d6c56784-fad2-4e61-b802-4cc0147d9891&js=false&country=us&device=mobile&proxy=residential&url=" + final_url;        // Request a string response from the provided URL.        StringRequest stringRequest = new StringRequest(Request.Method.GET, final_url,                new Response.Listener<String>() {                    @Override                    public void onResponse(String response) {                        listener.onDataLoaded(response, initialURL);                    }                }, new Response.ErrorListener() {            @Override            public void onErrorResponse(VolleyError error) {                listener.onDataLoaded("Error", initialURL);                //  textView.setText("That didn't work!");            }        });        stringRequest.setRetryPolicy(new DefaultRetryPolicy(12000,                1,                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));// Add the request to the RequestQueue.        queue.add(stringRequest);    }    @Override    public void onObjectReady(String title) {    }    @Override    public void onDataLoaded(String volleyReturn, String url) {        //  Log.d("app5", "VOLLEY : " + volleyReturn);        if (volleyReturn.contains("not-logged-in")) {            numRetries = 6;            processPotentialPrivate();            return;        }        if (volleyReturn.equalsIgnoreCase("error")) {            shouldRetryVolley();            return;        } else {            try {                Log.d("app5", "Volley ok! ");                if (volleyReturn.contains("shortcode_media")) {                    int j = volleyReturn.indexOf("{");                    volleyReturn = volleyReturn.substring(j);                }                JSONObject json = new JSONObject(volleyReturn);                JSONObject graphQlObject = json.getJSONObject("graphql");                JSONObject shortCode_media_object = graphQlObject.getJSONObject("shortcode_media");                processJSON(shortCode_media_object.toString());            } catch (Exception e) {                Log.d("app5", "Volley Error : " + e.getMessage());                GET(url);            }        }    }    protected void postExecute(final String result) {        try {            runOnUiThread(new Runnable() {                public void run() {                    if (result.compareTo("error_noquickkeep") == 0) {                        showErrorToast("Error", "Can't keep for post-later multi-photo posts.", true);                        return;                    }                    if (result.compareTo("private") == 0)                        return;                    if (result.compareTo("error") != 0) {                        if (result.compareTo("multi") == 0) {                            photoReady = true;                            if (isAutoSave | isQuickPost | isQuickKeep) {                                //     removeProgressDialog();                                //   if (isAutoSave)                                //     copyAllMultiToSave();                                return;                            }                            //   if (spinner != null)                            //     spinner.setVisibility(View.GONE);                            if (previewImage != null) {                                previewImage.setVisibility(View.GONE);                            }                            if (mDemoSlider != null)                                mDemoSlider.setVisibility(View.VISIBLE);                            if (mainUI != null)                                mainUI.setVisibility(View.VISIBLE);                            if (isQuickKeep) {                                Toast toast = Toast.makeText(ShareActivity.this, "Sorry. Quick Post Later not available for Multi-Posts", Toast.LENGTH_LONG);                                toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                                toast.show();                                finish();                                return;                            }                            isQuickKeep = false;                            isQuickPost = false;                        } else {                            try {                                //     if (isVideo)                                //       if (editPhotoBtn != null)                                //         editPhotoBtn.setVisibility(View.GONE);                                if (isQuickKeep) {                                    if (!isVideo) {                                  //      copyPostLaterToPictureFolder();                                        clearClipboard();                                        Toast toast = Toast.makeText(ShareActivity.this, R.string.postlaterconfirmtoast, Toast.LENGTH_LONG);                                        toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                                        toast.show();                                        finish();                                    } else                                        LoadVideo();                                } else if (isAutoSave) {                                    if (!isVideo) {                                        copyTempToSave();                                        //   finish();                                    } else                                        LoadVideo();                                } else if (isQuickPost) {                                    if (!isVideo) {                                        quickPostSendToInstagram();                                    } else                                        LoadVideo();                                } else {                                    String uriStr = tempFile.getAbsolutePath();                                    final Uri uri = Uri.parse(uriStr);                                    final String path = uri.getPath();                                    //  final Drawable drawable = Drawable.createFromPath(path);                                    mainUI.setVisibility(View.VISIBLE);                                    if (spinner != null) {                                        Log.d("app5", "remove spinner 2697");                                        spinner.setVisibility(View.GONE);                                    }                                    String country = Util.getUserCountry(getApplicationContext());                                    checkForRatingRequest();                                    if (isVideo) {                                        LoadVideo();                                        videoIcon.setVisibility(View.VISIBLE);                                        previewImage.setVisibility(View.GONE);                                    } else {                                        previewImage.setImageBitmap(Util.decodeFile(new File(path)));                                        previewImage.setVisibility(View.VISIBLE);                                    }                                    //   }                                    photoReady = true;                                }                            } catch (Exception e) {                                showErrorToast("#6 - " + e.getMessage(), "#6 " + getString(R.string.therewasproblem), true);                            }                        }                    }                }            });        } catch (Exception e) {            showErrorToast("#7 - " + e.getMessage(), "#7 " + getString(R.string.therewasproblem), true);        }    }    boolean isStoryURL = false;    int totalMultiToDownload = 0;    int errorLineNo = 0;    private void processPotentialPrivate() {        try {            if (spinner != null) {                runOnUiThread(new Runnable() {                    public void run() {                        spinner.setVisibility(View.GONE);                    }                });            }            String displayMsg;            Log.d("app5", "Json is private");            AlertDialog.Builder builder = new AlertDialog.Builder(ShareActivity.this);            if (currentURL.indexOf("stories") > 0) {                VideoDownloaderApp.sendEvent("sc_could_not_ret_story");                builder.setTitle("Stories not supported");                displayMsg = "Stories aren't support at this time because they require login to Instagram.";            } else {                VideoDownloaderApp.sendEvent("sc_could_not_ret_post");                builder.setTitle("Couldn't Retrieve the Post");                displayMsg = "The post may be unavailable, private, age restricted.";            }            final SpannableString m = new SpannableString(displayMsg);            Linkify.addLinks(m, Linkify.WEB_URLS);            builder.setCancelable(false);            builder.setMessage(m);            builder.setIcon(R.mipmap.ic_launcher);/** builder.setPositiveButton("Go To Login", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { // Do nothing but close the dialog dialog.dismiss(); Intent myIntent = new Intent(ShareActivity.this, InstagramLogin.class); myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION); myIntent.putExtra("clear_data", true); _this.startActivity(myIntent); } }); builder.setNeutralButton("Email Support", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int id) { emailSupport("Problem: can't retrieve post.", true); dialog.dismiss(); // finish(); } }); **/            builder.setNegativeButton("OK", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    launchedLogin = false;                    // Do nothing                    dialog.dismiss();                    finish();                }            });            AlertDialog alert = builder.create();            if (_this.isFinishing() == false)                alert.show();            return;        } catch (Exception e) {            int i = 1;        }    }    private void processNeedToLogin() {        try {            if (alreadyStartedErrorDialog)                return;            alreadyStartedErrorDialog = true;            if (spinner != null) {                runOnUiThread(new Runnable() {                    public void run() {                        spinner.setVisibility(View.GONE);                    }                });            }            String displayMsg;            AlertDialog.Builder builder = new AlertDialog.Builder(ShareActivity.this);            if (currentURL.indexOf("stories") > 0) {                VideoDownloaderApp.sendEvent("sc_could_not_ret_story");                builder.setTitle("Stories not supported");                displayMsg = "Stories aren't support at this time because they require login to Instagram.";            } else {                VideoDownloaderApp.sendEvent("sc_could_not_ret_post");                builder.setTitle("Couldn't Retrieve the Post");                displayMsg = "The post may be unavailable, private, age restricted.  Those aren't supported at this time since they require login to Instagram";            }            builder.setCancelable(false);            builder.setMessage(displayMsg);            builder.setIcon(R.mipmap.ic_launcher);            builder.setNeutralButton("Email Support",                    new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id) {                            emailSupport("Problem: can't retrieve post.", true);                            dialog.dismiss();                            // finish();                        }                    });            builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    launchedLogin = false;                    // Do nothing                    dialog.dismiss();                    finish();                }            });            AlertDialog alert = builder.create();            if (_this.isFinishing() == false)                alert.show();            return;        } catch (Exception e) {            int i = 1;        }    }    private void processMaybePrivatePhoto() {        try {            Log.d("app5", "maybe is private");            AlertDialog.Builder builder = new AlertDialog.Builder(ShareActivity.this);            builder.setTitle("Media not found!");            builder.setMessage("There was a problem finding that post. It may have been removed or something else happened.");            builder.setCancelable(false);            builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {                public void onClick(DialogInterface dialog, int which) {                    // Do nothing but close the dialog                    dialog.dismiss();                    finish();                }            });/** builder.setNegativeButton("Login Now/Again", new DialogInterface.OnClickListener() { public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); Intent myIntent = new Intent(ShareActivity.this, InstagramLogin.class); myIntent.putExtra("clear_data", true); _this.startActivity(myIntent); } }); **/            AlertDialog alert = builder.create();            if (_this.isFinishing() == false)                alert.show();            return;        } catch (Exception e) {        }    }    private void processMultiPhotoJSON(JSONObject json, int jsonType) {        boolean[] isVideoArr = null;        String[] picURLs = null;        String[] videoURLs = null;        try {            if (1 == 1) {                showMultiError();                return;            }            // Get the directory for the user's public pictures directory.            File file = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_DOWNLOADS + Util.RootDirectoryMultiPhoto);            if (!file.mkdirs()) {                Log.e("error", "Directory not created");            }            try {                File output = new File(file.getPath(), ".nomedia");                boolean fileCreated = output.createNewFile();            } catch (Exception e) {            }            // Get the directory for the user's public pictures directory.            file = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES + Util.RootDirectoryMultiPhoto);            if (!file.mkdirs()) {                Log.e("error", "Directory not created");            }            isMulti = true;            if (isQuickKeep) {                postExecute("error_noquickkeep");                return;            }            final Long currTime = System.currentTimeMillis();            try {                boolean isScreen = !isQuickPost && !isAutoSave && !isQuickKeep;                if (isScreen) {                    runOnUiThread(new Runnable() {                        public void run() {                            btnShare.setVisibility(View.GONE);                            postlater.setVisibility(View.GONE);                            //     btnInstagramstories.setVisibility(View.GONE);                            btnCurrentToFeed.setVisibility(View.VISIBLE);                            //       btnCurrentToStory.setVisibility((View.VISIBLE));                            previewImage.setVisibility(View.GONE);                            mDemoSlider.setPresetIndicator(SliderLayout.PresetIndicators.Center_Bottom);                            mDemoSlider.setVisibility(View.VISIBLE);                        }                    });                }                String folder = VideoDownloaderIGMultiPostFolder;                if (jsonType == 1)  // pre - 10/21 style                {                    final JSONArray pics = json.getJSONObject("edge_sidecar_to_children").getJSONArray("edges");                    totalMultiToDownload = pics.length();                    isVideoArr = new boolean[totalMultiToDownload];                    picURLs = new String[totalMultiToDownload];                    videoURLs = new String[totalMultiToDownload];                    for (int i = 0; i < totalMultiToDownload; i++) {                        picURLs[i] = pics.getJSONObject(i).getJSONObject("node").getString("display_url");                        isVideoArr[i] = pics.getJSONObject(i).getJSONObject("node").getString("is_video").equals("true");                        if (isVideoArr[i])                            videoURLs[i] = pics.getJSONObject(i).getJSONObject("node").getString("video_url");                    }                }                if (jsonType == 2)  // pre - 10/21 style                {                    final JSONArray pics = json.getJSONArray("carousel_media");                    totalMultiToDownload = pics.length();                    isVideoArr = new boolean[totalMultiToDownload];                    picURLs = new String[totalMultiToDownload];                    videoURLs = new String[totalMultiToDownload];                    for (int i = 0; i < totalMultiToDownload; i++) {                        JSONArray jsonA = pics.getJSONObject(i).getJSONObject("image_versions2").getJSONArray("candidates");                        picURLs[i] = jsonA.getJSONObject(0).getString("url");                        if (pics.getJSONObject(i).getString("media_type").equals("1")) // photo                        {                            isVideoArr[i] = false;                        } else {                            isVideoArr[i] = true;                            jsonA = pics.getJSONObject(i).getJSONArray("video_versions");                            videoURLs[i] = jsonA.getJSONObject(0).getString("url");                        }                    }                }                for (int i = 0; i < totalMultiToDownload; i++) {                    TextSliderView sliderView = new TextSliderView(_this);                    if (isScreen) {                        sliderView.image(picURLs[i]);                    }                    String fname = "";                    if (isVideoArr[i]) {                        if (isScreen)                            sliderView.description("Video #" + (i + 1));                        fname = author + "-" + currTime + i + ".mp4";                    } else {                        if (isScreen)                            sliderView.description("Photo #" + (i + 1));                        fname = folder + File.separator + author + "-" + currTime + i + ".jpg";                    }                    Log.d("app5", " fname  = " + fname);                    if (isScreen) {                        sliderView.bundle(new Bundle());                        sliderView.getBundle()                                .putString("url", picURLs[i]);                        sliderView.getBundle()                                .putString("fname", fname);                        sliderView.getBundle()                                .putString("is_video", isVideoArr[i] ? "true" : "false");                        sliderView.setScaleType(BaseSliderView.ScaleType.CenterInside);                        runOnUiThread(new Runnable() {                            public void run() {                                mDemoSlider.addSlider(sliderView);                            }                        });                    }                }            } catch (Exception e) {                int i9 = 43;            }            boolean downloadingStarted = false;            // final int index = i;            //  final File tmpFile = new File(fname);            try {                String fname;                readyToHideSpinner = false;                String caption = Util.prepareCaption(title, author, _this.getApplication().getApplicationContext(), caption_suffix, false);                ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);                ClipData clip = ClipData.newPlainText("Post caption", caption);                Objects.requireNonNull(clipboard).setPrimaryClip(clip);                for (int i = 0; i < totalMultiToDownload; i++) {                    Log.d("app5", "in loop " + i);                    if (isVideoArr[i]) {                        fname = author + "-" + currTime + i + ".mp4";                    } else {                        fname = author + "-" + currTime + i + ".jpg";                    }                    Log.d("app5", " fnames " + i + "   " + fname + "   " + currTime);                    if (isVideoArr[i] == false) {                        downloadImage(picURLs[i], fname);                    } else {                        downloadingStarted = true;                        LoadMultiVideo2(videoURLs[i], fname);                    }                }            } catch (Exception e) {                Log.d("app5", "exception e " + e.getMessage());            }            if (readyToHideSpinner || !downloadingStarted) {                runOnUiThread(new Runnable() {                    public void run() {                        Log.d("app5", "remove spinner 3032");                        //            spinner.setVisibility(View.GONE);                        //          showBottomButtons();                    }                });            }            readyToHideSpinner = true;            sendEvent("sc_multiphoto");            postExecute("multi");            return;        } catch (Exception e) {            //  processPotentialPrivate();            showErrorToast("#5a - " + e.getMessage(), getString(R.string.porblemfindingphoto) + "  " + e.getMessage(), true);            //  showErrorToast("#5a - " + e.getMessage(), "#5a - " + e.getMessage(), true);            return;        }    }    private boolean alreadyStartedErrorDialog = false;    private void processJSON(String jsonRes) {        JSONObject json = null;        Log.d("app5", jsonRes);        try {            json = new JSONObject(jsonRes);            try {                author = json.getJSONObject("owner").getString("username");                profile_pic_url = json.getJSONObject("owner").getString("profile_pic_url");            } catch (Exception e) {                Log.d("app5", "Exception  3197 : " + e.getMessage());            }            title = "";            try {                JSONObject json6 = json.getJSONObject("edge_media_to_caption");                JSONArray json7 = json6.getJSONArray("edges");                JSONObject json8 = json7.getJSONObject(0);                JSONObject json9 = json8.getJSONObject("node");                title = json9.getString("text");            } catch (Exception e) {            }            try {                JSONObject json6 = json.getJSONObject("caption");                title = json6.getString("text");            } catch (Exception e) {            }            try {                url = json.getString("display_url");                isVideo = json.getBoolean("is_video");                if (isVideo) {                    videoURL = json.getString("video_url");                }            } catch (Exception e) {            }            try {                JSONArray jsonA = json.getJSONObject("image_versions2").getJSONArray("candidates");                url = jsonA.getJSONObject(0).getString("url");                String media_type = json.getString("media_type");                isVideo = false;                if (media_type.equals("2")) {                    isVideo = true;                    jsonA = json.getJSONArray("video_versions");                    videoURL = jsonA.getJSONObject(0).getString("url");                }                if (media_type.equals("8")) {   // Multi                    processMultiPhotoJSON(json, 2);                }            } catch (Exception e) {            }        } catch (Exception e3) {            errorLineNo = 3080;            showErrorToast("Problem", "There seems to be a problem.  Please try again later. err: 3080", true);        }        if (json != null)            // Multi-Photo post            if (!json.isNull("edge_sidecar_to_children")) {                processMultiPhotoJSON(json, 1);                return;            }        if (!json.isNull("carousel_media")) {            processMultiPhotoJSON(json, 2);            return;        }        downloadSinglePhotoFromURL(url);    }    private void copyCaptionToClipboard() {    }    private void downloadSinglePhotoFromURL(String url) {        ExecutorService executor = Executors.newSingleThreadExecutor();        Handler handler = new Handler(Looper.getMainLooper());        executor.execute(new Runnable() {            @Override            public void run() {                try {                    Bitmap bitmap = null;                    try {                        URL imageurl = new URL(url);                        originalBitmapBeforeNoCrop = BitmapFactory.decodeStream(imageurl.openConnection().getInputStream());                        bitmap = originalBitmapBeforeNoCrop;                    } catch (Exception e) {                        showErrorToast("Out of memory", "Sorry not enough memory to continue", true);                    }                    if (isVideo == false) {                        try {                            if (preferences.getBoolean("watermark_checkbox", false) ||                                    preferences.getBoolean("custom_watermark", false)) {                                Point p = new Point(10, (bitmap != null ? bitmap.getHeight() : 0) - 10);                                int textSize = 20;                                if (bitmap.getHeight() > 640)                                    textSize = 50;                                bitmap = mark(bitmap, author, p, Color.YELLOW, 180, textSize, false);                            }                        } catch (Exception e99) {                        }                    }                    ByteArrayOutputStream bytes = new ByteArrayOutputStream();                    bitmap.compress(Bitmap.CompressFormat.JPEG, 99, bytes);                    lastDownloadedFile = tempFile;                    FileOutputStream fo = new FileOutputStream(tempFile);                    fo.write(bytes.toByteArray());                    // remember close de FileOutput                    fo.close();                    sendEvent("sc_photo");                    showBottomButtons();                } catch (Exception e) {                    showErrorToast("#5b - " + e.getMessage(), getString(R.string.porblemfindingphoto) + " " + e.getMessage(), true);                    //    showErrorToast("#5b - " + e.getMessage(), "#5b - " + e.getMessage(), true);                    return;                }                handler.post(new Runnable() {                    @Override                    public void run() {                        //UI Thread work here                        postExecute("");                    }                });            }        });    }    private void setBottomButtonsVisible() {        runOnUiThread(new Runnable() {            public void run() {                try {                    if (vButtons != null)                        vButtons.setVisibility(View.VISIBLE);                } catch (Exception e) {                }            }        });    }    private void showBottomButtons() {        if (showInterstitial) {            if (mInterstitialAd != null) {                Log.d("app5", "Ad Really Ready - Showing Bottom Buttons");                setBottomButtonsVisible();            } else {                Handler handler2 = new Handler(Looper.getMainLooper());                handler2.postDelayed(new Runnable() {                    @Override                    public void run() {                        Log.d("app5", "Ad Not Ready - wait  1 sec");                        if (mInterstitialAd != null) {                            Log.d("app5", "Ad Ready - Showing Bottom Buttons");                            setBottomButtonsVisible();                            return;                        } else {                            Handler handler2 = new Handler(Looper.getMainLooper());                            handler2.postDelayed(new Runnable() {                                @Override                                public void run() {                                    Log.d("app5", "Ad Not Ready - Showing Bottom Buttons");                                    setBottomButtonsVisible();                                    return;                                }                            }, 1500);                        }                    }                }, 1000);            }        }        if (showInterstitial == false) {            setBottomButtonsVisible();        }    }    private class AsyncTaskDownloadMedia extends AsyncTask<String, String, String> {        @Override        protected void onPreExecute() {            super.onPreExecute();        }        @Override        protected String doInBackground(String... strings) {            try {            } catch (Exception e) {                e.printStackTrace();            }            return "";        }        @Override        protected void onPostExecute(String b) {            super.onPostExecute(b);        }    }    private void downloadImage(String url, final String fname) {        try {            Util.startDownloadMulti(url, "", _this, fname, isAutoSave);        } catch (OutOfMemoryError e) {            int y = 1;        }    }    private void showMultiError() {        showErrorToast("There was a problem", "Looks like this is a multi-photo post. They are not supported yet.", true);    }    private void showStoriesError() {        showErrorToast("There was a problem", "Looks like this is a multi-photo post.  Instagram made changes so it isn't working on this version anymore.\n\nYou can try out the Professional version (uses a different method that costs the app per post) : \n\nhttps://play.google.com/store/apps/details?id=com.nimmble.rgpro", true);    }    private void processNewInstagramURL(String html) {        int h = html.indexOf("._aahi");        Log.d("app5", String.valueOf(h));        int v1 = html.indexOf("_ab1d");        int p1 = html.indexOf("_aagt");        int p2 = html.indexOf("_aagv");        int second = html.indexOf("<article", html.indexOf("<article") + 1);        int multi2 = html.indexOf("_9zm2");// Forgot password?      Log In    Sign up        if (html.indexOf("Forgot password?") > 0 && html.indexOf("Log In") > 0 && html.indexOf("Sign up") > 0) {            // login screen active            errorLineNo = 3341;            processPotentialPrivate();            return;        }        Document doc = null;        doc = Jsoup.parse(html);        try {            //    doc = Jsoup.connect("https://VideoDownloaderIG.com/debug-info2.txt").get();            // html = doc.outerHtml();        } catch (Exception e) {        }        Elements titleTag = doc.getElementsByTag("title");        try {            title = String.valueOf(titleTag.get(0));            profile_pic_url = null;            int first = title.indexOf(":");            if (first > 0) {                title = title.substring(first + 3, title.length() - 9);                Log.d("app5", "TITLE: " + title);            }            int t = html.indexOf("\"meta\":{\"title\"");            int a = html.indexOf(" ", t);            author = html.substring(t + 17, a - 1);            Log.d("app5", "Author : " + author);            author = org.apache.commons.text.StringEscapeUtils.unescapeJava(author);            t = html.indexOf("\\\"", t);            int end = html.indexOf("\\\"\"", t + 2);            title = html.substring(t + 2, end);            title = org.apache.commons.text.StringEscapeUtils.unescapeJava(title);        } catch (Exception e) {        }        try {            String type = null;            String photoURL = null;            if ((multi2 > 0 && multi2 < second) || (multi2 > 0 && second == -1)) {                showMultiError();                return;            }            Elements e2 = doc.getElementsByClass("_aaqy");            if (e2.size() > 0) {                Document doc2 = Jsoup.parse(String.valueOf(e2.get(0)));                Elements aTag = doc2.getElementsByTag("a");                author = aTag.attr("href");                author = author.substring(1, author.length() - 1);                Log.d("app5", author);            }            Elements e = doc.getElementsByClass("_ab1d");            if (e.size() > 0 && ((p1 < 0 && p2 < 0) || (p1 > 0 && (v1 < p1)) || (p2 > 0 && (v1 < p2)))) {                videoURL = e.attr("src");                if (videoURL.length() > 0) {                    isVideo = true;                    if (videoURL.indexOf("blob") != -1) {                        // we got a blob....no good                        showErrorToast("Network problem", "There is a problem getting this video, try again later on a stronger Wifi signal", true);                        return;                    }                    Elements e3 = doc.getElementsByClass("_ab1e");                    if (e3.size() > 0) {                        Log.d("app5", String.valueOf(e3.get(0)));                        url = e3.attr("src");                        downloadSinglePhotoFromURL(url);                        return;                    }                    Elements e31 = doc.getElementsByClass("_aagv");                    if (e31.size() > 0) {                        Log.d("app5", String.valueOf(e31.get(0)));                        url = e31.attr("srcset");                        downloadSinglePhotoFromURL(url);                        return;                    }                }            }            isVideo = false;            Elements e4 = doc.getElementsByClass("_aagt");            if (e4.size() > 0) {                Log.d("app5", String.valueOf(e4.get(0)));                url = e4.attr("src");                if (!url.isEmpty()) {                    prepareForSinglePhoto(url);                    return;                }            } else {                Elements e31 = doc.getElementsByClass("_aagv");                if (e31.size() > 0) {                    Log.d("app5", String.valueOf(e31.get(0)));                    url = e31.get(0).children().get(0).attr("src");                    Log.d("app5", "URL1 : " + url);                    if (url.isEmpty()) {                        String htmlPhoto = String.valueOf(e31.get(0));                        int t = htmlPhoto.indexOf("srcset=");                        int end = htmlPhoto.indexOf(" ", t);                        if (t > 0 && end > t) {                            url = htmlPhoto.substring(t + 8, end - 1);                            url = url.replaceAll("&amp;", "&");                            Log.d("app5", "URL new : " + url);                            if (url.length() > 0) {                                downloadSinglePhotoFromURL(url);                                return;                            }                        }                    } else {                        Log.d("app5", "URL : " + url);                        downloadSinglePhotoFromURL(url);                        return;                    }                }                //   processPotentialPrivate();                if (author == null) {                    errorLineNo = 3501;                    processPotentialPrivate();                    return;                }                // if there are no JPG then check for login                if (html.indexOf("jpg") == -1) {                    errorLineNo = 3507;                    processPotentialPrivate();                    return;                }                // check for <video                if (html.indexOf("<video") > 0) {                    Element videoElement = doc.select("video").first();                    videoURL = videoElement.attr("src");                    if (videoURL.length() > 0) {                        isVideo = true;                        if (videoURL.indexOf("blob") != -1) {                            // we got a blob....no good                            showErrorToast("Network problem", "There is a problem getting this video, try again later on a stronger Wifi signal", true);                            return;                        }                        Document doc1 = Jsoup.parse(html.substring(html.indexOf("<video")));                        Element imgE = doc1.select("img").first();                        if (imgE != null) {                            url = imgE.attr("src");                            downloadSinglePhotoFromURL(url);                            VideoDownloaderApp.sendEvent("sc_video_element_found");                            return;                        }                    }                }/** Elements metaTags = doc.getElementsByTag("meta"); videoURL = null; photoURL = null; for (Element metaTag : metaTags) { if (metaTag.attr("property").equals("og:video") || metaTag.attr("name").equals("og:video")) { videoURL = metaTag.attr("content"); isVideo = true; Log.d("app5", "Found video URL: " + videoURL); } if (metaTag.attr("property").equals("og:image") || metaTag.attr("name").equals("og:image")) { photoURL = metaTag.attr("content"); url = photoURL; downloadSinglePhotoFromURL(url); Log.d("app5", "Found image URL: " + photoURL); } } **/                if (photoURL != null || videoURL != null)                    return;                //    if (photoURL != null && (videoURL == null && shouldBeVideo == false))                //      showErrorToast("There was a problem", "Something happened.  Perhaps this was a multi-photo post which are not supported at this time. \n\nYou can try out the PRO version : https://play.google.com/store/apps/details?id=com.nimmble.rgpro", false);                //  else {                if (videoURL == null && shouldBeVideo == true) {                    errorLineNo = 3573;                    // processPotentialPrivate();                    showErrorToast("There was a problem ", "Unable to retrieve video.  There may have been a network problem, try again later. # 3573, " + webViewErrorCode, true);                }                return;            }        } catch (Exception e) {            errorLineNo = 3585;            processPotentialPrivate();        }        errorLineNo = 3589;        processPotentialPrivate();    }    boolean loadingFinished = true;    boolean redirect = false;    private boolean alreadyFinished;    WebView webview;    private void processNonInstagramURL(String html) {        Document doc = Jsoup.parse(html);        Elements metaTags = doc.getElementsByTag("meta");        String videoURL = null;        String photoURL = null;        for (Element metaTag : metaTags) {            if (metaTag.attr("property").equals("og:video") || metaTag.attr("name").equals("og:video")) {                videoURL = metaTag.attr("content");                Log.d("app5", "Found video URL: " + videoURL);                break;            }            if (metaTag.attr("property").equals("og:image") || metaTag.attr("name").equals("og:image")) {                photoURL = metaTag.attr("content");                Log.d("app5", "Found image URL: " + photoURL);                break;            }        }        if (videoURL != null)            prepareForSingleVideo(videoURL);        else if (photoURL != null)            prepareForSinglePhoto(photoURL);        else {            showErrorToast("There was a problem ", "Unable to find a video or photo at this link.", true);            // processPotentialPrivate();        }    }    private void emailSupport(String theText, boolean doFinish) {        String version = "";        try {            PackageManager manager = _this.getPackageManager();            PackageInfo info = manager.getPackageInfo(                    _this.getPackageName(), 0);            version = info.versionName;        } catch (Exception e) {        }        File filetosend = null;        String details = theText                + "\n\nPost URL: " + currentURL                + "\n\nAPP VERSION: " + version                + "\nANDROID OS: " + Build.VERSION.RELEASE                + "\nMANUFACTURER : " + Build.MANUFACTURER                + "\nMODEL : " + Build.MODEL                + "\nERRCode : " + webViewErrorCode                + "\nLINENO : " + errorLineNo;        Intent intent = new Intent(Intent.ACTION_SEND);        intent.putExtra(Intent.EXTRA_EMAIL, new String[]{"support@jaredco.com"});        intent.putExtra(Intent.EXTRA_TEXT, details);        if (!currentHTML.isEmpty()) {            try {                filetosend = new File(_this.getCacheDir(), "debug-info.txt");                FileOutputStream fOut = new FileOutputStream(filetosend);                fOut.write(currentHTML.getBytes());                fOut.flush();                fOut.close();                filetosend.setReadable(true, false);                Uri fileURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", filetosend);                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);                if (filetosend != null) {                    intent.putExtra(                            Intent.EXTRA_STREAM,                            fileURI);                }            } catch (Exception e) {            }        }        intent.putExtra(Intent.EXTRA_SUBJECT, "Reporting issue with VideoDownloaderIG Free");        intent.setType("message/rfc822");        Toast.makeText(_this, "Preparing email", Toast.LENGTH_LONG).show();        startActivityForResult(Intent.createChooser(intent, "Select Email Sending App :"), 12);        try {            final Handler handler1 = new Handler();            handler1.postDelayed(new Runnable() {                @Override                public void run() {                    try {                        AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(ShareActivity.this);                        // set dialog message                        alertDialogBuilder.setTitle("Thanks for sending support email!");                        alertDialogBuilder.setIcon(R.mipmap.ic_launcher);                        alertDialogBuilder.setMessage("I appreciate you taking the time to send a support email.  I will respond ASAP.")                                .setCancelable(true).setPositiveButton("Ok", new DialogInterface.OnClickListener() {                                    public void onClick(DialogInterface dialog, int id) {                                        if (doFinish)                                            finish();                                    }                                });                        // create alert dialog                        AlertDialog alertDialog = alertDialogBuilder.create();                        // show it                        alertDialog.show();                    } catch (Exception e999) {                    }                }            }, 3000);        } catch (Exception e) {        }        sendEvent("main_email_support");    }    private void processParler(String html) {        Document doc = Jsoup.parse(html);        Elements metaTags = doc.getElementsByTag("meta");        String videoURL = null;        String photoURL = null;        for (Element metaTag : metaTags) {            if (metaTag.attr("property").equals("og:video") || metaTag.attr("name").equals("og:video")) {                videoURL = metaTag.attr("content");                Log.d("app5", "Found video URL: " + videoURL);                break;            }        }        if (videoURL != null) {            prepareForSingleVideo(videoURL);            return;        }        Elements elements = doc.getElementsByTag("img");        for (Element e : elements) {            String alt = e.attr("alt");            if (alt.equals("Article Image")) {                photoURL = e.attr("src");                break;            }        }        if (photoURL != null)            prepareForSinglePhoto(photoURL);        else            showErrorToast("There was a problem ", "Unable to find a video or photo at this link.", true);        //  processPotentialPrivate();    }    private void prepareForSinglePhoto(String photoURL) {        downloadSinglePhotoFromURL(photoURL);    }    private void prepareForSingleVideo(String tempVideoURL) {        isVideo = true;        videoURL = tempVideoURL;        postExecute("");    }    private final String urlFinished = " ";    private int webViewErrorCode = 0;    private void processHTMLforStories(String html) {        Log.d("app5", "in processHTML for Stories ");        isStoryURL = true;        url = "";        videoURL = "";        if (html.indexOf("_9zm4") > 0) {            processNeedToLogin();            return;        }        //    try {        //         Document doc = Jsoup.connect("https://VideoDownloaderIG.com/debug-info2.txt").get();        //      html = doc.outerHtml();        //   } catch (Exception e){}        try {            sendEvent("story_attempted", "", "");            runOnUiThread(new Runnable() {                public void run() {                    if (isAutoSave | isQuickKeep | isQuickPost)                        findViewById(R.id.browser2).setVisibility(View.GONE);                    else                        findViewById(R.id.browser).setVisibility(View.GONE);                }            });            int endPos;            int startPos;            isVideo = false;            // check for video            startPos = html.indexOf("<video");            if (startPos > -1) {                isVideo = true;                startPos = html.indexOf("src=", startPos);                endPos = html.indexOf(">", startPos);                videoURL = html.substring((startPos + 5), endPos - 1);                videoURL = videoURL.replaceAll("&amp;", "&");                Log.d("app5", "VideoURL : " + videoURL);                VideoDownloaderApp.sendEvent("sc_story_video_found");            }            Document doc1;            if (isVideo)                doc1 = Jsoup.parse(html.substring(html.indexOf("<video")));            else {                doc1 = Jsoup.parse(html);                VideoDownloaderApp.sendEvent("sc_story_photo_found");            }            startPos = html.indexOf("srcset");            if (startPos > -1) {                endPos = html.indexOf(" ", startPos);                url = html.substring((startPos + 8), endPos);                Log.d("app5", "MediaURL : " + url);            }            if (url.isEmpty()) {                Element imgE = doc1.select("img").first();                if (imgE != null) {                    url = imgE.attr("src");                }            }            startPos = trackURL.indexOf("stories");            endPos = trackURL.indexOf("/", startPos + 9);            author = trackURL.substring(startPos + 8, endPos);            Log.d("app5", "author = " + author);            if (!url.isEmpty()) {                sendEvent("story_found", "", "");                url = url.replaceAll("&amp;", "&");                downloadSinglePhotoFromURL(url);            } else {                // showErrorToast("#3528", getString(R.string.porblemfindingphoto), true);                errorLineNo = 3937;                processPotentialPrivate();            }        } catch (Exception e) {            errorLineNo = 3943;            processPotentialPrivate();        }    }    private void processHTML(String html) {        try {            //   Document    doc = Jsoup.connect("https://VideoDownloaderIG.com/debug-info2.txt").get();            //    html = doc.outerHtml();        } catch (Exception e) {        }        processNewInstagramURL(html);    }    String trackURL;    boolean toLogin = false;    private String currentHTML = "";    public void GET(final String urlIn) {        if (alreadyTriedGET)            return;        runOnUiThread(new Runnable() {            public void run() {                spinner.setVisibility(View.VISIBLE);            }        });        alreadyTriedGET = true;        alreadyStartedErrorDialog = false;        class MyJavaScriptInterface {            MyJavaScriptInterface(Context ctx) {            }            @JavascriptInterface            public void showHTML(String html) {                alreadyFinished = true;                currentHTML = html;                if (trackURL.contains("stories")) {                    processHTMLforStories(html);                } else                    processHTML(html);            }        }        try {            runOnUiThread(new Runnable() {                public void run() {                    if (urlIn.contains("/s/") || urlIn.contains("stories")) {                        if (isAutoSave | isQuickKeep | isQuickPost)                            findViewById(R.id.browser2).setVisibility(View.VISIBLE);                        else                            findViewById(R.id.browser).setVisibility(View.VISIBLE);                    }                    Log.d("app5", "I am the UI thread ");                    if (isAutoSave | isQuickKeep | isQuickPost)                        webview = findViewById(R.id.browser2);                    else                        webview = findViewById(R.id.browser);                    webview.getSettings().setLoadWithOverviewMode(true);                    webview.getSettings().setUseWideViewPort(true);                    webview.getSettings().setJavaScriptEnabled(true);                    webview.addJavascriptInterface(new MyJavaScriptInterface(ShareActivity.this), "HtmlViewer");                    webview.getSettings().setLoadWithOverviewMode(true);                    String uagent = webview.getSettings().getUserAgentString();                    try {                        //       uagent = uagent.replace("; wv", "");                    } catch (Exception e) {                    }                    Log.d("app5", "new uA : " + uagent);                    webview.getSettings().setUserAgentString(uagent);                    //  webview.getSettings().setUserAgentString("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36");                    //  webview.getSettings().setUserAgentString("Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5376e Safari/8536.25");                    // webview.getSettings().setLoadsImagesAutomatically(false);                    //webview.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);                    webview.getSettings().setUserAgentString("Mozilla/5.0 (iPhone; CPU iPhone OS 16_0_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.6 Mobile/15E148 Safari/604.1");                    webview.setWebViewClient(new WebViewClient() {                        @SuppressWarnings("deprecation")                        @Override                        public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {                            Log.e(TAG, errorCode + " : " + description + " at " + failingUrl);                            webViewErrorCode = errorCode;                        }                        @Override                        public void onPageStarted(WebView view, String url,                                                  android.graphics.Bitmap favicon) {                            Log.d("app5", "in page started " + url);                        }                        @Override                        public boolean shouldOverrideUrlLoading(WebView view, String url) {                            Log.d("app5", "in page should override " + url);                            if (url.contains("https://itunes.apple.com/app/instagram") || url.contains("instagram.com/accounts/login/")) {                                // toLogin = true;                                //   VideoDownloaderIGApp.sendEvent("sc_tologin_true");                                Log.d("app5", "Found login page");                                return false;                            }                            // https://itunes.apple.com/app/instagram                            if (url.startsWith("https:")) {                                view.loadUrl(url);                                trackURL = url;                            }                            return true;                        }                        /**                         * Javascript-accessible callback for declaring when a page has loaded.                         */                        @Override                        public void onPageFinished(WebView view, String url) {                            Log.d("app5", url + " /  " + urlFinished);                            //   CookieManager.getInstance().flush();                            Log.d("app5", "Progress : " + webview.getProgress() + " ");                            if (toLogin) {                                //   Log.d ("app5", "progress 100 - " + toLogin);                                //  alreadyTriedGET = true;                                //   processNeedToLogin();                                Log.d("app5", "Found login page 2");                                //   return;                            }                            if (webview.getProgress() == 100 && alreadyFinished == false) {                                // remove https://www                                String original = urlIn;                                if (original.contains("www."))                                    original = original.replace("www.", "");                                if (url.contains("www."))                                    url = url.replace("www.", "");                                if (original.contains("/?"))                                    original = original.replace("/?", "?");                                if (url.contains("/?"))                                    url = url.replace("/?", "?");                                Log.d("app5", "Orig - " + original);                                Log.d("app5", "last - " + url);                                int delay = 6000;                                final String url5 = url;                                final Handler handler = new Handler();                                handler.postDelayed(new Runnable() {                                    @Override                                    public void run() {                                        Log.d("app5", "Press tap to play");                                        webview.loadUrl("javascript: document.getElementsByClassName('sqdOP')[0].click();");                                        webview.loadUrl("javascript: document.getElementsByClassName('_42FBe')[0].click();");                                        webview.loadUrl("javascript: document.getElementsByClassName('_acav')[0].click();");                                        final Handler handler1 = new Handler();                                        handler1.postDelayed(new Runnable() {                                            @Override                                            public void run() {                                                Log.d("app5", "grab HTML  - " + url5);                                                webview.loadUrl("javascript:window.HtmlViewer.showHTML" +                                                        "('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');");                                            }                                        }, 500);                                    }                                }, 4000);                                /**else {                                 final Handler handler1 = new Handler();                                 handler1.postDelayed(new Runnable() {                                @Override public void run() {                                Log.d("app5", "grab HTML - " + url5);                                webview.loadUrl("javascript:window.HtmlViewer.showHTML" +                                "('<html>'+document.getElementsByTagName('html')[0].innerHTML+'</html>');");                                }                                }, 4000);                                 }                                 **/                                alreadyFinished = true;                                Log.d("app5", "in page finisihed " + url);                            }                        }                    });                    webview.setLayerType(View.LAYER_TYPE_HARDWARE, null);                    alreadyFinished = false;                    webview.postDelayed(new Runnable() {                        @Override                        public void run() {                            Log.d("app5", "Clear cache and load url : " + urlIn);                            webview.clearCache(true);                            toLogin = false;                            webViewErrorCode = 0;                            webview.loadUrl(urlIn);                            trackURL = urlIn;                            currentURL = urlIn;                        }                    }, 500);                }            });        } catch (Exception e) {            Log.d("app5", e.getMessage());            showErrorToast("error 4112", "There was a problem. Please try again. 4112 - " + e.getMessage());        }    }    private void clearClipboard() {        try {            ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);            ClipData clip = ClipData.newPlainText("", "");            Objects.requireNonNull(clipboard).setPrimaryClip(clip);        } catch (Exception e) {        }    }    /* 3) Handle the results */    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            /* 4) Make a case for the request code we passed to startActivityForResult() */            if (requestCode == 1) {                try {                    Uri mImageUri = data.getData();                    previewImage.setImageBitmap(Util.decodeFile(new File(mImageUri != null ? mImageUri.getPath() : null)));                    //  final Drawable drawable = Drawable.createFromPath(mImageUri.getPath());                    //    previewImage.setImageDrawable(drawable);                } catch (Exception e) {                }            }        }    }    public void onClickTryProClickBtn(View v) {        sendEvent("qs_clickon_pro_ad", "", "");        final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object        try {            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.nimmble.rgpro")));        } catch (android.content.ActivityNotFoundException anfe) {            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.nimmble.rgpro")));        }    }    public void onClickSnapChat(View v) {        copyTempToSave();        copyCaptionToClipboard();        try {            Intent shareIntent = new Intent();            shareIntent.setAction(Intent.ACTION_SEND);            shareIntent.setPackage("com.snapchat.android");            shareIntent.setClassName(                    "com.snapchat.android",                    "com.snapchat.android.LandingPageActivity");            shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);            startActivity(shareIntent);            final Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    try {                        finish();                    } catch (Exception e) {                        Log.d("app5", "on finish");                    }                }            }, 2000);        } catch (Exception e) {            Toast.makeText(_this, "Snapchat Not Installed", Toast.LENGTH_LONG).show();        }    }    public void onClickTumblr(View v) {        //  copyTempToSave();        try {            Intent shareIntent = new Intent();            shareIntent.setAction(Intent.ACTION_SEND);            shareIntent.setPackage("com.tumblr");            shareIntent.setClassName(                    "com.tumblr",                    "com.tumblr.creation.receiver.ShareActivity");            shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);            copyCaptionToClipboard();            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);            }            Uri MediaURI;            if (isVideo) {                shareIntent.setType("video/*");                File t = new File(Util.getTempVideoFilePath());                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", t);                } else {                    MediaURI = Uri.fromFile(t);                }            } else {                Log.d("app5", "tempfile :  " + tempFile.toString());                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", tempFile);                } else {                    MediaURI = Uri.fromFile(tempFile);                }                shareIntent.setType("image/jpeg");            }            shareIntent.putExtra(Intent.EXTRA_STREAM, MediaURI);            startActivity(shareIntent);            final Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    try {                        finish();                    } catch (Exception e) {                        Log.d("app5", "on finish");                    }                }            }, 2000);        } catch (Exception e) {            Toast.makeText(_this, "Tumblr Not Installed", Toast.LENGTH_LONG).show();        }    }    public void onClickUpgradeButton(View v) {        sendEvent("qs_upgrade_btn_clkV2", "", "");        final String appPackageName = getPackageName(); // getPackageName() from Context or Activity object        try {            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.nimmble.rgpro")));        } catch (android.content.ActivityNotFoundException anfe) {            startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=com.nimmble.rgpro")));        }        //  Intent i = new Intent(_this, UpgradeActivity.class);        // i.putExtra("from_qs_screen", true);        // startActivity(i);        finish();    }    public void OnClickProAd(View v) {        onClickTryProClickBtn(v);        sendEvent("sc_pro_ad", "", "");    }    public void OnClickEditPhoto(View v) {    }    public void onClickBackToInstagram(View v) {        sendEvent("qs_back_to_instagram", "", "");        finish();    }    private void cleanUp() {        try {            if (originalBitmapBeforeNoCrop != null)                originalBitmapBeforeNoCrop.recycle();            if (pd != null)                pd.cancel();        } catch (Exception e) {        }        try {            removeProgressDialog();            if (isMulti)                scanMultiPostFolder();            scanVideoDownloaderIGFolder();            if (webViewInsta != null)                webViewInsta.destroy();        } catch (Exception e) {        }    }    @Override    public void onPause() {        super.onPause();        unregisterReceiver(downloadCompleteReceiver);    }    private void processPhotoImage() {        try {            if (isAutoSave) {                copyTempToSave();                //   finish();            } else if (isQuickPost) {                if (inputMediaType == MEDIA_IMAGE)                    quickPostSendToInstagram();                else {                    isVideo = true;                    String uriStr = tempFile.getAbsolutePath();                    final Uri uri = Uri.parse(uriStr);                    final String path = uri.getPath();                    tempVideoFile = new File(path);                    quickPostSendToInstagram();                }            } else {                //  btndownloadphoto.setVisibility(View.GONE);                String uriStr = tempFile.getAbsolutePath();                final Uri uri = Uri.parse(uriStr);                final String path = uri.getPath();                if (inputMediaType == MEDIA_IMAGE) {                    previewImage.setImageBitmap(Util.decodeFile(new File(path)));                    //   final Drawable drawable = Drawable.createFromPath(path);                    // previewImage.setImageDrawable(drawable);                } else {                    isVideo = true;                    tempVideoFile = new File(path);/** videoPlayer = (VideoView) findViewById(R.id.videoplayer); videoPlayer.setOnPreparedListener(_this);videoPlayer.setOnCompletionListener(_this); videoPlayer.setKeepScreenOn(true); // creating object of // media controller class MediaController mediaController = new MediaController(_this); // sets the anchor view // anchor view for the videoView mediaController.setAnchorView(videoPlayer); // sets the media player to the videoView mediaController.setMediaPlayer(videoPlayer); videoPlayer.setVideoPath(path); videoPlayer.setVisibility(View.VISIBLE); previewImage.setVisibility(View.GONE); **/                }                if (spinner != null) {                    Log.d("app5", "remove spinner 3589");                    spinner.setVisibility(View.GONE);                }                photoReady = true;            }        } catch (Exception e) {            showErrorToast("#9 - " + e.getMessage(), "#9 " + getString(R.string.therewasproblem));        }    }    public File getVideoStorageDir(String albumName) {        // Get the directory for the user's public pictures directory.        File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), albumName);        if (!file.mkdirs()) {            Log.e("error", "Directory not created");        }        return file;    }    public File getAlbumStorageDir(String albumName) {        // Get the directory for the user's public pictures directory.        File file = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), albumName);        if (!file.mkdirs()) {            Log.e("error", "Directory not created");        }        return file;    }    private void showErrorToast(final String error, final String displayMsg) {        if (!updateScreenOn)            showErrorToast(error, displayMsg, false);    }    private void showErrorToast(final String error, final String displayMsg,                                final boolean doFinish) {        runOnUiThread(new Runnable() {            public void run() {                try {                    alreadyStartedErrorDialog = true;                    try {                        if (pd != null) {                            if (pd.isShowing()) {                                pd.dismiss();                                pd = null;                            }                        }                    } catch (Exception e) {                    }                    sleep(1000);                    if (updateScreenOn)                        return;                    AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(ShareActivity.this);                    final SpannableString m = new SpannableString(displayMsg);                    Linkify.addLinks(m, Linkify.WEB_URLS);                    // set dialog message                    alertDialogBuilder.setMessage(m).setCancelable(false).setPositiveButton("Ok", new DialogInterface.OnClickListener() {                        public void onClick(DialogInterface dialog, int id) {                            if (doFinish)                                finish();                        }                    });                    // create alert dialog                    AlertDialog alertDialog = alertDialogBuilder.create();                    // show it                    alertDialog.show();                    ((TextView) alertDialog.findViewById(android.R.id.message)).setMovementMethod(LinkMovementMethod.getInstance());                } catch (Exception e) {                }            }        });    }    private void LoadMultiVideo2(final String videoURL, final String fname) {        String ThisUrl = videoURL;        loadingMultiVideo = true;        runOnUiThread(new Runnable() {            public void run() {                try {                    if (numMultVideos == 0)                        startProgressDialog();                    numMultVideos += 1;                } catch (Exception e4) {                }            }        });        String str3 = "";        try {            long DownloadId = Util.startDownloadMulti(videoURL, str3, _this, fname, isAutoSave);        } catch (Exception e) {            Log.d("app5", e.getMessage());        }        isVideo = false;    }    private void startAutoSaveMultiProgress() {        if (pd != null)            pd = ProgressDialog.show(ShareActivity.this, _this.getString(R.string.progress_dialog_msg), _this.getString(R.string.auto_saving_progress), true, true);    }    private void startProgressDialog() {        if (noAds && isAutoSave)            return;        else            runOnUiThread(new Runnable() {                public void run() {                    pd = ProgressDialog.show(ShareActivity.this, _this.getString(R.string.progress_dialog_msg), _this.getString(R.string.auto_saving_progress), true, true);                }            });    }    private void removeProgressDialog() {        runOnUiThread(new Runnable() {            public void run() {                try {                    if (pd != null) {                        if (pd.isShowing()) {                            pd.dismiss();                            pd = null;                        }                    }                } catch (Exception e) {                }            }        });    }    private void LoadVideo() {        startProgressDialog();        String str3 = "";        try {            long DownloadId = Util.startDownload(this.videoURL, str3, _this, tempVideoName);        } catch (Exception e) {            Log.d("app5", e.getMessage());        }    }    private class addWatermarkToFile extends AsyncTask<String, Integer, String> {        @Override        protected String doInBackground(String... fnames) {            String fname = fnames[0];            if (fname.endsWith("mp4"))                return "";            try {                Bitmap bitmap = null;                try {                    bitmap = BitmapFactory.decodeFile(fname);                } catch (Throwable e) {                    showErrorToast("Out of memory", "Sorry not enough memory to continue", true);                }                try {                    if (preferences.getBoolean("watermark_checkbox", false) ||                            preferences.getBoolean("custom_watermark", false)) {                        Point p = new Point(10, (bitmap != null ? bitmap.getHeight() : 0) - 10);                        int textSize = 20;                        if (bitmap.getHeight() > 640)                            textSize = 50;                        bitmap = mark(bitmap, author, p, Color.YELLOW, 180, textSize, false);                    }                } catch (Exception e99) {                }                ByteArrayOutputStream bytes = new ByteArrayOutputStream();                bitmap.compress(Bitmap.CompressFormat.JPEG, 99, bytes);                try {                    Log.d("app5", "in oncomplete photo : " + fname);                    FileOutputStream fo = new FileOutputStream(new File(fname), false);                    byte[] contents = bytes.toByteArray();                    fo.write(contents);                    fo.flush();                    // remember close de FileOutput                    fo.close();                } catch (Exception e) {                    Log.d("app5", "in  error oncomplete photo : " + e.getMessage());                }            } catch (Exception e) {            }            return fname;        }        protected void onProgressUpdate(Integer... progress) {        }        protected void onPostExecute(String result) {        }    }    MediaController mediaController = null;    int totalDownloadedAlready = 0;    BroadcastReceiver onComplete = new BroadcastReceiver() {        @SuppressLint("Range")        public void onReceive(Context ctxt, Intent intent) {            totalDownloadedAlready++;            Log.d("app5", "In Oncomplete :  " + totalMultiToDownload + "   " + totalDownloadedAlready);            if (isMulti) {                if (!isVideo) {                    try {                        String fname = "";                        Bitmap bitmap = null;                        Bitmap originalBitmapBeforeNoCrop;                        Bundle extras = intent.getExtras();                        DownloadManager.Query q = new DownloadManager.Query();                        q.setFilterById(extras.getLong(DownloadManager.EXTRA_DOWNLOAD_ID));                        Cursor c = downloadManager.query(q);                        if (c.moveToFirst()) {                            int status = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));                            if (status == DownloadManager.STATUS_SUCCESSFUL) {                                // process download                                fname = c.getString(c.getColumnIndex(DownloadManager.COLUMN_TITLE));                                fname = Environment.getExternalStorageDirectory() + "/" + Environment.DIRECTORY_PICTURES + Util.RootDirectoryMultiPhoto + fname;                                // get other required data by changing the constant passed to getColumnIndex                            }                        }                        new addWatermarkToFile().execute(fname);                    } catch (Exception e) {                    }                }                if (totalDownloadedAlready == totalMultiToDownload) {                    if (isQuickPost) {                        scanMultiPostFolder();                        showMultiDialog();                        return;                    } else if (isAutoSave) {                        scanVideoDownloaderIGFolder();                        finish();                        return;                    } else {                        runOnUiThread(new Runnable() {                            public void run() {                                try {                                    Log.d("app5", "all downloads complete");                                    spinner.setVisibility(View.GONE);                                    showBottomButtons();                                    removeProgressDialog();                                } catch (Exception e4) {                                }                            }                        });                    }                }                return;            }            if (isQuickKeep) {                if (isVideo)                    removeProgressDialog();                clearClipboard();                //    copyPostLaterToPictureFolder();                Toast toast = Toast.makeText(ShareActivity.this, R.string.postlaterconfirmtoastvideo, Toast.LENGTH_LONG);                toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                toast.show();                finish();                return;            }            if (isVideo) {                removeProgressDialog();                scanVideoDownloaderIGFolder();                if (isAutoSave) {                    copyTempToSave();                    //   finish();                } else if (isQuickPost) {                    if (isVideo) {                        quickPostSendToInstagram();                    }                } else {                    Log.d("app5", "preparing video player");                    videoPlayer = findViewById(R.id.videoplayer);                    videoPlayer.setOnPreparedListener(PreparedListener);                    videoPlayer.setKeepScreenOn(true);                    // creating object of                    // media controller class                    mediaController = new MediaController(_this) {                        @Override                        public boolean dispatchKeyEvent(KeyEvent event) {                            if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {                                super.hide();                                ((Activity) getContext()).finish();                                return true;                            }                            return super.dispatchKeyEvent(event);                        }                    };                    // sets the anchor view                    // anchor view for the videoView                    mediaController.setAnchorView(videoPlayer);                    // sets the media player to the videoView                    mediaController.setMediaPlayer(videoPlayer);                    videoPlayer.setMediaController(mediaController);                    mediaController.setVisibility(View.VISIBLE);                    mediaController.setEnabled(true);                    videoPlayer.setVideoPath(Util.getTempVideoFilePath());                    videoPlayer.setVisibility(View.VISIBLE);                    previewImage.setVisibility(View.GONE);                    photoReady = true;                    showBottomButtons();                }            }        }    };    MediaPlayer.OnPreparedListener PreparedListener = new MediaPlayer.OnPreparedListener() {        @Override        public void onPrepared(MediaPlayer m) {            try {                if (m.isPlaying()) {                    m.stop();                    m.release();                    m = new MediaPlayer();                }                m.setVolume(0f, 0f);                m.setLooping(false);                m.start();            } catch (Exception e) {                e.printStackTrace();            }        }    };    private void copyAllMultiToSave() {        new LongOperation().execute("");    }    private class LongOperation extends AsyncTask<String, Void, String> {        @Override        protected String doInBackground(String... params) {            return "Executed";        }        @Override        protected void onPostExecute(String result) {            File dir = new File(VideoDownloaderIGMultiPostFolder);            if (dir.isDirectory()) {                String[] children = dir.list();                for (int i = 0; i < children.length; i++) {                    try {                        if (!children[i].contains("nomedia")) {                            File source = new File(dir, children[i]);                            File destination = new File(VideoDownloaderIGPictureFolder + File.separator + children[i]);                            try {                                copy(source, destination);                            } catch (IOException e) {                                e.printStackTrace();                            }                        }                    } catch (Exception e) {                        int i4 = 1;                    }                }            }            Log.i("app5", "done copy multi");            scanVideoDownloaderIGFolder();            if (noAds && isAutoSave) {                // user is premium and we are in quick save mode                removeProgressDialog();                Toast toast = Toast.makeText(ShareActivity.this, "Saving multi-post complete.", Toast.LENGTH_LONG);                toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                toast.show();                if (spinner != null) {                    Log.d("app5", "remove spinne 4635r");                    spinner.setVisibility(View.GONE);                }                finish();                return;            }            if (isAutoSave) {                // user is premium and we are in quick save mode                if (false) {                    final Handler handler = new Handler();                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            //   findViewById(R.id.upgradeBtn).setVisibility(View.VISIBLE);                            //  findViewById(R.id.backBtn).setVisibility(View.VISIBLE);                            TextView t = findViewById(R.id.autosaveText);                            t.setText("Quick Save Done");                            final Handler handler = new Handler();                            handler.postDelayed(new Runnable() {                                @Override                                public void run() {                                    Log.d("app5", "remove spinner 4663");                                    spinner.setVisibility(View.GONE);                                    sendEvent("gms_ad_needs_to_show");                                    if (mInterstitialAd != null) {                                        mInterstitialAd.show(_this);                                        sendEvent("gms_ad_show_requested");                                        autoSaving = true;                                    } else                                        finish();                                }                            }, 2000);                        }                    }, 3000);                } else {                    if (spinner != null) {                        Log.d("app5", "remove spinner");                        spinner.setVisibility(View.GONE);                    }                    Toast toast = Toast.makeText(ShareActivity.this, "Saving multi-post complete.", Toast.LENGTH_LONG);                    toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                    toast.show();                }                return;            }            changeSaveButton();            clearMultiPostFolder();            removeProgressDialog();            Toast toast = Toast.makeText(ShareActivity.this, "Saving multi-post complete.", Toast.LENGTH_LONG);            toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);            toast.show();            //    Toast toast = Toast.makeText(ShareActivity.this, "Saving multi-post photos and videos.", Toast.LENGTH_LONG);            //  toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);            //  toast.show();            int numWarnings = sharedPref.getInt("countOfRuns", 0);            //    numWarnings = 5;            if (numWarnings < 3) {                addToNumSessions();                return;            }            if (showInterstitial) {                sendEvent("gms_ad_needs_to_show");                if (mInterstitialAd != null) {                    mInterstitialAd.show(_this);                    sendEvent("gms_ad_show_requested");                }            }        }        @Override        protected void onPreExecute() {            if (!isAutoSave)                startProgressDialog();        }        @Override        protected void onProgressUpdate(Void... values) {        }    }    boolean autoSaving = false;    public void copy(File src, File dst) throws IOException {        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {            Log.d("app5", "Copying :  " + src.toString() + "   " + dst.toString());            Files.copy(src.toPath(), dst.toPath());        } else {            FileInputStream inStream = new FileInputStream(src);            FileOutputStream outStream = new FileOutputStream(dst);            FileChannel inChannel = inStream.getChannel();            FileChannel outChannel = outStream.getChannel();            inChannel.transferTo(0, inChannel.size(), outChannel);            inStream.close();            outStream.close();        }    }    public void copyTempToSave() {        try {            File src;            Long currTime = System.currentTimeMillis();            String fname;            Toast toast;            String msg;            if (isVideo) {                src = new File(Util.getTempVideoFilePath());                fname = VideoDownloaderIGPictureFolder + File.separator + author + "_video_" + currTime + ".mp4";                saveToastMsg = "Video was saved in /Pictures/VideoDownloaderIG/Video-" + currTime + ".mp4";            } else {                src = lastDownloadedFile;                fname = VideoDownloaderIGPictureFolder + File.separator + author + "-" + currTime + ".jpg";                saveToastMsg = "Photo was saved in /Pictures/VideoDownloaderIG/" + author + "  -" + currTime + ".jpg";            }            File dst = new File(fname);            copy(src, dst);            Intent mediaScannerIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);            Uri fileContentUri = Uri.fromFile(dst); // With 'permFile' being the File object            mediaScannerIntent.setData(fileContentUri);            this.sendBroadcast(mediaScannerIntent);            if (noAds && isAutoSave) {                // user is premium and we are in quick save mode                toast = Toast.makeText(getBaseContext(), saveToastMsg, Toast.LENGTH_LONG);                toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                toast.show();                finish();                return;            }            if (isAutoSave) {                // user is premium and we are in quick save mode                if (false) {                    final Handler handler = new Handler();                    handler.postDelayed(new Runnable() {                        @Override                        public void run() {                            //   findViewById(R.id.upgradeBtn).setVisibility(View.VISIBLE);                            //  findViewById(R.id.backBtn).setVisibility(View.VISIBLE);                            TextView t = findViewById(R.id.autosaveText);                            t.setText("Quick Save Done");                            int delay = 2000;                            if (mInterstitialAd != null)                                delay = 500;                            final Handler handler = new Handler();                            handler.postDelayed(new Runnable() {                                @Override                                public void run() {                                    Log.d("app5", "remove spinner 4903");                                    spinner.setVisibility(View.GONE);                                    sendEvent("gms_ad_needs_to_show");                                    if (mInterstitialAd != null) {                                        mInterstitialAd.show(_this);                                        autoSaving = true;                                        sendEvent("gms_ad_show_requested");                                    } else                                        finish();                                }                            }, delay);                        }                    }, 3000);                }                return;            }            changeSaveButton();            int numWarnings = sharedPref.getInt("countOfRuns", 0);            if (numWarnings < 3) {                addToNumSessions();                return;            }            if (showInterstitial) {                sendEvent("gms_ad_needs_to_show");                if (mInterstitialAd != null) {                    mInterstitialAd.show(_this);                    sendEvent("gms_ad_show_requested");                }            }        } catch (                Exception e) {            int i = 1;        }    }    private void shareWithChooser() {        try {            // flurryAgent.logEvent("Share button pressed");            // Create the new Intent using the 'Send' action.            Intent share = new Intent(Intent.ACTION_SEND);            share.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);            String txt;            if (inputMediaType == 0) {                String caption;                //count how many hashtags                if (title != null && (Util.isKeepCaption(_this) == false)) {                    share.putExtra(Intent.EXTRA_SUBJECT, "VideoDownloaderIG from @" + author);                    txt = "@VideoDownloaderIG from @" + author + "  -  " + title + "  -  " + getIntent().getStringExtra("mediaUrl")                            + "\n\nVideoDownloaderIG App - Repost without leaving Instagram - Download Here : http://VideoDownloaderIG.com/download";                } else {                    share.putExtra(Intent.EXTRA_SUBJECT, "Photo share");                    txt = "  - via @VideoDownloaderIG app";                }                caption = txt;                share.putExtra(Intent.EXTRA_TEXT, caption);                //  clearClipboard();            } else {                String caption = "";                if (Util.isKeepCaption(_this) == false)                    caption = "@VideoDownloaderIG no-crop:";                share.putExtra(Intent.EXTRA_TEXT, caption);                //   clearClipboard();            }            Uri MediaURI;            if (isVideo) {                File t = new File(Util.getTempVideoFilePath());                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", t);                } else {                    MediaURI = Uri.fromFile(t);                }            } else {                Log.d("app5", "tempfile :  " + tempFile.toString());                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", tempFile);                } else {                    MediaURI = Uri.fromFile(tempFile);                }            }            if (isVideo) {                share.setType("video/*");                share.putExtra(Intent.EXTRA_STREAM, MediaURI);            } else {                share.putExtra(Intent.EXTRA_STREAM, MediaURI);                share.setType("image/*");            }            // Broadcast the Intent.            startActivity(Intent.createChooser(share, "Share to"));            cleanUp();            finish();        } catch (Exception e) {            showErrorToast(e.getMessage(), getString(R.string.therewasproblem));        }    }    private boolean currentToFeedBtnPressed = false;    @Override    public void onClick(View v) {        try {            if (!photoReady)                return;            if (v == btndownloadphoto) {                copyCaptionToClipboard();                if (isMulti) {                    copyAllMultiToSave();                    sendEvent("sc_savebtn_multi");                    return;                }                sendEvent("sc_savebtn");                copyCaptionToClipboard();                copyTempToSave();                return;            }            if (v == btnShare) {                sendEvent("sc_sharebtn");                copyCaptionToClipboard();                shareWithChooser();                return;            }            if (v == btnCurrentToFeed) {                currentToFeedBtnPressed = true;                sendEvent("sc_current_to_feed");                if (isMulti) {                    runOnUiThread(new Runnable() {                        public void run() {                            try {                                if (Objects.requireNonNull(mDemoSlider.getCurrentSlider().getBundle().get("is_video")).toString() == "false") {                                    //  Log.d("app5", mDemoSlider.getCurrentSlider().getBundle().get("fname").toString());                                    tempFile = new File(mDemoSlider.getCurrentSlider().getBundle().get("fname").toString());                                    isVideo = false;                                } else {                                    isVideo = true;                                    //  tempVideoFile = new File(mDemoSlider.getCurrentSlider().getBundle().get("fname").toString());                                    Util.setTempVideoFileName(mDemoSlider.getCurrentSlider().getBundle().get("fname").toString());                                }                                // reset isMulti to false so we after ad sendToInstagram will be called                                if (showInterstitial) {                                    sendEvent("gms_ad_needs_to_show");                                    if (mInterstitialAd != null) {                                        mInterstitialAd.show(_this);                                        sendEvent("gms_ad_show_requested");                                    } else {                                        sendToInstagam();                                    }                                } else {                                    sendToInstagam();                                }                                //   onClick(btnInstagram);                            } catch (Exception e) {                            }                        }                    });                    return;                }            }            if (v == postlater) {                sendEvent("sc_postlaterbtn");                if (inputMediaType != 0) {                    title = "";                    author = "";                }                //  copyPostLaterToPictureFolder();                clearClipboard();                Toast toast;                if (isVideo) {                    toast = Toast.makeText(ShareActivity.this, R.string.postlaterconfirmtoastvideo, Toast.LENGTH_SHORT);                } else                    toast = Toast.makeText(ShareActivity.this, R.string.postlaterconfirmtoast, Toast.LENGTH_SHORT);                toast.setGravity(Gravity.CENTER_VERTICAL, 0, 0);                toast.show();                //    cleanUp();                finish();                return;            }            if (v == btnInstagram || v == btnInstagramstories) {                instagramBtnClicked = true;                if (v == btnInstagramstories) {                    btnStoriesClicked = true;                    sendEvent("sc_storiesbtn");                } else {                    btnStoriesClicked = false;                    sendEvent("sc_postfeedbtn");                }                if (isMulti) {                    if (btnStoriesClicked)                        sendMultiPhotosToStories();                    else                        showMultiDialog();                    return;                }                final int numWarnings = preferences.getInt("captionWarning", 0);                if (numWarnings < 3) {                    addToNumSessions();                    sendToInstagam();                } else {                    //    diff = 8 ;                    if (showInterstitial) {                        sendEvent("gms_ad_needs_to_show");                        if (mInterstitialAd != null || rewardedAd != null) {                            String lastRewardDeniedDate = preferences.getString("lastRewardDeniedDate", "");                            Date c = Calendar.getInstance().getTime();                            SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());                            String currentDate = df.format(c);                            // if (rewardedAd.isLoaded() == false || lastRewardDeniedDate.equals(currentDate)) {                            if (1 == 1) {                                if (mInterstitialAd != null) {                                    sendEvent("gms_ad_show_requested");                                    Log.d("app5", "showing insterstial 5945");                                    mInterstitialAd.show(_this);                                }                                return;                            }                            sendEvent("sc_admob8_reward_shown");                            AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(ShareActivity.this);                            // flurryAgent.logEvent("Rating Good or Bad Dialog");                            // set dialog message                            alertDialogBuilder.setIcon(R.mipmap.ic_launcher);                            alertDialogBuilder.setTitle("Reward Option");                            alertDialogBuilder.setMessage("Want to get a free upgrade for the rest of the day, just click OK to watch a short video").setCancelable(false)                                    .setNegativeButton("No", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id) {                                            // if this button is clicked, just close                                            // the dialog box and do nothing                                            SharedPreferences.Editor editor = preferences.edit();                                            Date c = Calendar.getInstance().getTime();                                            SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy", Locale.getDefault());                                            String formattedDate = df.format(c);                                            editor.putString("lastRewardDeniedDate", formattedDate);                                            editor.commit();                                            sendEvent("sc_rewardvideo_DENIED");                                            if (mInterstitialAd != null) {                                                mInterstitialAd.show(_this);                                            }                                            dialog.cancel();                                            return;                                        }                                    })                                    .setPositiveButton("Ok", new DialogInterface.OnClickListener() {                                        public void onClick(DialogInterface dialog, int id) {                                            // if this button is clicked, close                                            // current activity                                            // flurryAgent.logEvent("Good Selected");                                            sendEvent("sc_rewardvideo_OK");                                            dialog.cancel();                                        }                                    });                            // create alert dialog                            AlertDialog rewardDialog = alertDialogBuilder.create();                            // show it                            rewardDialog.show();                        } else {                            Log.d("TAG", "The interstitial wasn't loaded yet.");                            sendToInstagam();                        }                    } else                        sendToInstagam();                }            }        } catch (Exception e) {            showErrorToast(e.getMessage(), "#10 " + getString(R.string.therewasproblem));        }    }    private void changeSaveButton() {        btndownloadphoto.setImageResource(R.drawable.savedicon);        btndownloadphoto.setEnabled(false);    }    private void sendMultiPhotosToStories() {        try {            sendEvent("MultiToStories");            // flurryAgent.logEvent("Instagram button pressed");            // FlurryAgent.logEvent("Click Instagram");            String caption = Util.prepareCaption(title, author, _this.getApplication().getApplicationContext(), caption_suffix, tiktokLink);            Intent shareIntent = new Intent();            shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);            shareIntent.setPackage("com.instagram.android");            //  shareIntent.setClassName("com.instagram.android",instagram_activity);            if (btnStoriesClicked) {                sendEvent("ClickStoriesBtn", "", "");                shareIntent.setClassName(                        "com.instagram.android",                        "com.instagram.share.handleractivity.MultiStoryShareHandlerActivity");            }            shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);            ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);            ClipData clip = ClipData.newPlainText("Post caption", caption);            Objects.requireNonNull(clipboard).setPrimaryClip(clip);            ArrayList<Uri> uriList = getListOfMultiPhotos();            if (uriList == null) {                showErrorToast("error", "There was a problem.", true);                return;            }            shareIntent.setAction(Intent.ACTION_SEND_MULTIPLE);            shareIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uriList);            shareIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);            shareIntent.setType("*/*");            int numWarnings = preferences.getInt("captionWarning", 0);            Log.d("VideoDownloaderIG", "Numwarnings : " + numWarnings);            startActivity(Intent.createChooser(shareIntent, "Choose"));            //startActivity(shareIntent);            final Handler handler = new Handler();            handler.postDelayed(new Runnable() {                @Override                public void run() {                    try {                        finish();                    } catch (Exception e) {                        Log.d("app5", "on finish");                    }                }            }, 250);        } catch (Exception e) {            // bring user to the market to download the app.            Intent intent = new Intent(Intent.ACTION_VIEW);            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            intent.setData(Uri.parse("market://details?id=" + "com.instagram.android"));            startActivity(intent);        }    }    private ArrayList<Uri> getListOfMultiPhotos() {        //     Thread thread = new Thread(new Runnable() {        //       @Override        //     public void run() {        try {            if (VideoDownloaderIGMultiPostFolder != null) {                File dir = new File(VideoDownloaderIGMultiPostFolder);                if (dir.isDirectory()) {                    String[] children = dir.list();                    final ArrayList<Uri> imageUris = new ArrayList<>(children.length);                    Uri MediaURI;                    for (int i = 0; i < children.length; i++) {                        try {                            if (!children[i].contains("nomedia")) {                                File theDir = new File(Environment.getExternalStorageDirectory(), Environment.DIRECTORY_PICTURES +                                        Util.RootDirectoryMultiPhoto + children[i]);                                Log.d("app5", theDir.toString());                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", theDir);                                } else {                                    MediaURI = Uri.fromFile(theDir);                                }                                imageUris.add(MediaURI);                            }                        } catch (Exception e) {                            int i4 = 1;                        }                    }                    return imageUris;                }            }        } catch (Exception e) {        }        return null;    }    private void sendToInstagam() {        try {            String caption = Util.prepareCaption(title, author, _this.getApplication().getApplicationContext(), caption_suffix, tiktokLink);            Intent shareIntent = new Intent();            shareIntent.setAction(Intent.ACTION_SEND);            shareIntent.setPackage("com.instagram.android");            //  shareIntent.setClassName("com.instagram.android",instagram_activity);            if (btnStoriesClicked) {                sendEvent("ClickStoriesBtn", "", "");                shareIntent.setClassName(                        "com.instagram.android",                        "com.instagram.share.handleractivity.StoryShareHandlerActivity");            } else {                shareIntent.setClassName(                        "com.instagram.android",                        "com.instagram.share.handleractivity.ShareHandlerActivity");            }            shareIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NO_ANIMATION);            ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);            ClipData clip = ClipData.newPlainText("Post caption", caption);            Objects.requireNonNull(clipboard).setPrimaryClip(clip);            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);            }            Uri MediaURI;            if (isVideo) {                shareIntent.setType("video/*");                File t = new File(Util.getTempVideoFilePath(isMulti));                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", t);                } else {                    MediaURI = Uri.fromFile(t);                }            } else {                Log.d("app5", "tempfile :  " + tempFile.toString());                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                    MediaURI = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + ".provider", tempFile);                } else {                    MediaURI = Uri.fromFile(tempFile);                }                shareIntent.setType("image/jpeg");            }            shareIntent.putExtra(Intent.EXTRA_STREAM, MediaURI);            int numWarnings = preferences.getInt("captionWarning", 0);            Log.d("VideoDownloaderIG", "Numwarnings : " + numWarnings);            if (numWarnings < 3 && inputMediaType == 0) {                Log.d("VideoDownloaderIG", "Numwarnings  2 : " + numWarnings);                addToNumSessions();                showPasteDialog(shareIntent);            } else {                startActivity(shareIntent);                final Handler handler = new Handler();                handler.postDelayed(new Runnable() {                    @Override                    public void run() {                        try {                            Log.d("app5", "finish in send_to_instagram");                            finish();                        } catch (Exception e) {                            Log.d("app5", "on finish");                        }                    }                }, 2000);            }        } catch (Exception e8) {            // bring user to the market to download the app.            Intent intent = new Intent(Intent.ACTION_VIEW);            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            intent.setData(Uri.parse("market://details?id=" + "com.instagram.android"));            startActivity(intent);        }    }}